{"componentChunkName":"component---src-pages-blog-tsx","path":"/blog/","result":{"data":{"allFeedDou":{"edges":[{"node":{"link":"https://dou.ua/lenta/articles/why-you-need-open-source-world/","title":"Світ Open Source: чому розробнику з аутсорсу варто долучатися","pubDate":"Mon, 08 Jun 2020 10:00:04 +0300","content":"<p>Суб’єктивний погляд на світ Open Source з позиції простого розробника з двома роками активної участі. Не претендую на істину, не завалюю порадами, тільки структуровані персональні спостереження. Можливо, ця стаття допоможе зрозуміти — бути чи не бути Open Source Contributor’ом, адже краще вчитися на чужому досвіді.</p>\n\n<p><i>Note: Наведені приклади розглядаємо в контексті GitHub, тож, прихильники Bitbucket і GitLab, вибачте за «дискримінацію».</i></p>\n\n<p>Як розробник я з самого початку використовував готові рішення зі світу відкритого коду. Це був бездумний <i>Ctrl+C/Ctrl+V</i> команд для встановлення і запуску чужого пакету з документації. Як теля не думає, звідки береться молоко, так і джун не морочиться над тим, хто і як пише ці пакети. Проблема вирішена — закрили таск, не працює — шукаємо далі.</p>\n\n<p>Такий споживацький підхід — це нормально, капіталізм усе-таки. Проблеми виникають тоді, коли не вдається знайти відповідне рішення. Після багаторазового перечитування документації готових, але не підхожих, рішень постаєш перед вибором:</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image9_hKjLK1Q.png\"></p>\n\n<p>Довгий час я обирав шлях «написання власних рішень», але коли став більш досвідченим, почав створювати issues і незабаром перейшов до роботи над виправленнями та новим функціоналом. Звичайно, було лячно відразу вносити зміни в код, тому я зайшов з боку документації. Зрозумів, як усе працює, і пробував вирішувати функціональні завдання. Так почався мій шлях в Open Source, і тепер я сприймаю цей світ по-іншому, адже знаю, «звідки молоко» і як зробити краще.</p>\n\n<p>За кілька років я достатньо освоївся в Open Source. Наразі <a href=\"https://www.npmjs.com/~alexandrtovmach\" target=\"_blank\">маю три персональних проєкти</a>, за які не соромно (+7 проєктів «так собі»). Очолюю організацію <a href=\"https://github.com/figma-plugin-helper-functions\" target=\"_blank\">Figma Plugin Helpers</a> і намагаюся побудувати Open Source ком’юніті навколо <a href=\"https://www.figma.com/\" target=\"_blank\">Figma</a>. Беру активну участь в <a href=\"https://github.com/nodejs/i18n/\" target=\"_blank\">комітеті i18n проєкту Node.js</a>, де займаюся побудовою процесів локалізації. Ну й безліч разових issues та PR у різних проєктах, з якими випадково стикався. Нижче я виділив деякі недоліки та переваги, які помітив протягом цих років.</p>\n\n<h2>Переваги</h2>\n\n<p>Почну з хорошого. А саме — чому мені подобається витрачати +30 хвилин на день на безкоштовні проєкти з відкритим вихідним кодом.</p>\n\n<h3>Різноманітний досвід у програмуванні</h3>\n\n<p>Незалежно від кваліфікації, займаної посади та розміру інвойсу, кожен розробник обмежений проєктом. Це, своєю чергою, означає, що список використовуваних технологій обраний і статичний. Найближчі зміни стеку трапляться не скоро або взагалі ніколи.</p>\n\n<p>Рутина — головний вбивця інтересу як у щоденній роботі, так і в професії загалом. Наші дбайливі й не дуже керівники щосили намагаються догодити, адже незадоволений співробітник завтра втече до сусідів. Тут тобі й смузі вранці, й електрогітара в офісі, й абонементи в спорткомплекси. Але як би вони не старалися, вирішальним фактором (після зарплати) залишається проєкт. Чи це цікавий стартап на модних фреймворках, чи велика компанія на Angular 1.X, так чи інак настане момент, коли все набридне. Така природа людини — знецінювати все, чим вона володіє, і зазіхати на сусідське.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image4_6ouG4rq.png\"></p>\n\n<p>Набридло писати на своєму стеку? Не поспішай бігати по співбесідах, просто знайди цікавий проєкт у світі Open Source — і вперед.</p>\n\n<p><i>Note: Я не проти зміни роботи, але потрібно мислити адекватно. Якщо проєкт об’єктивно хороший, команда класна, проте «набридло одне й те саме», не варто відразу міняти футболку EServe на SoftPAM.</i></p>\n\n<p>Бувають випадки, коли вже понад рік сидиш на проєкті й не можеш підтримати розмову про інші технології. Щоб не випадати з контексту світових подій, приділяйте по 30 хвилин на Twitter/Habr/DOU. Але як щодо практики? <a href=\"https://www.hackerrank.com/\" target=\"_blank\">Hackerrank</a>, <a href=\"https://www.codewars.com/dashboard\" target=\"_blank\">Codewars</a>, <a href=\"https://leetcode.com/\" target=\"_blank\">LeetCode</a> та інші платформи допоможуть з алгоритмами, але все одно реальної роботи з патернів програмування, архітектури та іншого не буде. Тут приходить Open Source!</p>\n\n<p>Величезний вибір проєктів на будь-який смак, від інді-розробок до трендових фреймворків, від великих monorepo до однофайлових пакетів. Захотілося спробувати новий фреймворк/підхід/мову — <a href=\"https://github.com/search\" target=\"_blank\">глобальний пошук GitHub</a> вже чекає.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image12_V0Txn9i.png\" style=\"width: 700px;\"></p>\n\n<h3>Свобода</h3>\n\n<p>Хай пробачить вчителька з математики мої старання:</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image5_sm6GRwT.png\" style=\"width: 400px;\"></p>\n\n<p>На роботі A ми зобов’язуємося виконувати x завдань, за винагороду y протягом часу T. Ця формула підходить лише для лабораторних умов у вакуумі. Для застосування її на практиці варто додати коефіцієнт реального життя q, що охоплює додаткові параметри:</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image6_CY1pdW5.png\" style=\"width: 400px;\"></p>\n\n<p>Наприклад, мій показник q — це стосунки з колегами та начальством, умови в офісі і його віддаленість від дому, інтерес до проєкту та технологій тощо. Зараз він трохи нижчий за одиницю, але якщо він дорівнює 0 — робота перестає буде цікавою для мене. Хотілось би дізнатись у коментарях, що входить у ваш q і чому він дорівнює наразі.</p>\n\n<p>Якщо ж застосувати цей розрахунок на Open Source, то всі змінні будуть викреслені. В цьому і полягає свобода: жодних обмежень, вимог, босів і дедлайнів, тільки цікаві завдання, які можна розв’язати з новим підходом або стеком. З’явилося бажання — покриваю тестами v14 Node.js, якщо завтра набридне, дивитимуся YouTube. І ніхто не сваритиме мене за тести, навіть якщо я ніколи їх не закінчу.</p>\n\n<p><i>Note: Вищенаведені формули не більше як літературний прийом. Прохання не шукати в них глибинний зміст або математичне обґрунтування.</i></p>\n\n<h3>Розвиток soft skills</h3>\n\n<p>Одна голова добре, дві краще, а всі maintainer’и одразу — відмінно, але складно. Працюючи над черговим виправленням або новим функціоналом, звичайно ж, хочеться в результаті залити його в master. Для цього потрібно не лише написати добрий код, а й відстояти свою ідею та довести слушність. У світі Open Source панує демократія, і кожен готовий озвучити свою позицію.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image1_88QctUr.png\"></p>\n\n<p>Що серйозніший проєкт і що активніше в ньому ком’юніті, то більше доведеться спілкуватися. Кожен PR і issue — це нова дискусія, новий шанс потренуватися в мистецтві переконання та попрактикувати англійську.</p>\n\n<p>Крім комунікативних умінь, ви розвиваєте додатково лідерські якості. Це може бути як створення та управління своїм проєктом, так і лідерські позиції в чужому. Звісно, в особистому проєкті не варто очікувати напливу сотень тисяч користувачів, яких треба координувати. Але щоб правильно відповісти на перший issue, теж необхідна навичка. Наприклад, у моєму найбільш активному персональному проєкті <a href=\"https://github.com/alexandrtovmach/react-microsoft-login\" target=\"_blank\">react-microsoft-login</a> за півтора року існування набралося всього 18 issues. Беручи участь у більш масштабних Open Source проєктах від <a href=\"https://github.com/nodejs/\" target=\"_blank\">Node.js</a>, <a href=\"https://github.com/figma/\" target=\"_blank\">Figma</a>, <a href=\"https://github.com/AdobeXD\" target=\"_blank\">Adobe</a>, я вчуся вести перемовини, керувати командами та бути ментором. Навряд чи я б міг займатися тим самим на основній роботі через специфіку outsource, та й просто тому, що наше діло гребти.</p>\n\n<h3>Самореклама</h3>\n\n<p>Під час роботи над проєктом можна перетнутися з різними людьми по всьому світу, тим самим формуючи мережу знайомств. Звучить трохи популістськи, але зв’язки сильніші за гроші. На них тримається Кремнієва долина, де команда для стартапу формується в черзі за кавою. Тут те саме, тільки онлайн. Подискутували під кількома issues, потім у Slack просиш переглянути твій PR. Слово за слово — і вже ніби знайомі.</p>\n\n<p><i>Note: Так-так, великі Open Source проєкти часто мають свій Slack workspace.</i></p>\n\n<p>Як використовувати такі знайомства, вирішувати вам: почати разом стартап або домовитись про безкоштовну ночівлю на випадок подорожей чи просто сказати «шукаю роботу» і отримати гарячу позицію з готовою рекомендацією. У будь-якому разі гірше від таких зв’язків не буде.</p>\n\n<p>Так, наприклад, я вже маю заплановані походи в бар по всьому світу, два запрошення на конференції як доповідач і ще кілька як слухач.</p>\n\n<p>Та якщо не вдаватися в романтичні мрії про власну справу і повернутися в галерні будні, то тут теж є вигода. Приходиш на співбесіду, а тобі пропонують каву, печиво та офер, тому що ти Core Contributor у create-react-app. Іншому кандидату з ідентичним досвідом, найімовірніше, доведеться відповідати на банальні запитання на кщталт «Які ви знаєте типи в JavaScript?». Ну, ви розумієте.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image10_qO4YoOl.png\"></p>\n\n<h3>Карма</h3>\n\n<p>Я використовую безкоштовні продукти з відкритим кодом, то чому б не віддати борг батьківщині? Це з розряду чогось особистого, але мені складно залишатися винним. Мені приємно усвідомлювати, що я теж роблю свій внесок і можу допомогти іншим розробникам розв’язати їхні проблеми.</p>\n\n<h2>Недоліки</h2>\n\n<p>Тепер перейдімо до «поганих новин». Повна свобода — це величезний плюс, але водночас величезний мінус. Певним чином це анархія, обмежена правилами платформи GitHub. Принижувати та ображати інших учасників не можна, але як будувати процеси розробки, хто головний і що з усім цим робити — ніде не регламентовано. Все це сформувало певні проблеми.</p>\n\n<h3>Ієрархія</h3>\n\n<p>Перед початком роботи на будь-якому проєкті завжди добре провести онбординг, щоб розповісти суть, пояснити ключові технічні моменти та познайомити з командою. На останньому етапі, як правило, я дізнаюсь, хто на проєкті бос, хто сусід, а хто каву приносить. Іншими словами, «вивчаю ієрархію». Так ось в Open Source цих ролей немає, від чого складно орієнтуватися в просторі та що-небудь робити, принаймні спочатку.</p>\n\n<p>Пам’ятаю, як протягом двох тижнів я <a href=\"https://github.com/nodejs/nodejs.org/pull/2243\" target=\"_blank\">намагався зрозуміти, хто головний у перекладах</a> у Node.js. Питав у всіх підряд про процеси, про те, як правильно і неправильно робити, і хто може перевірити мою роботу. В результаті усе з’ясував і так занурився в ті справи, що зараз очолюю їх. Зрозуміти, як усе влаштовано в проєкті, зайняло в мене немало часу. Я й досі не розумію всіх аспектів і не знаю, в кого спитати про них.</p>\n\n<p>Якщо прочитати всі <em>contribution<span>.</span>md</em> і взяти участь у кількох обговореннях, можна визначити активних учасників і «теоретичних» босів. Здавалося б, усе, питання вирішене, але ні! Ніхто ні за що не відповідає ні в межах проєкту, ні в межах окремого завдання. Немає керівника, який призначить таск і дедлайн, немає виконавця, який зобов’язаний закрити issue. Як від мене ніхто не може вимагати написання тестів для v14 Node.js, так і я не можу вимагати цього від інших. Тож може статися так, що ці тести ніхто й ніколи не напише.</p>\n\n<p>Трохи лицемірства: мені подобається безвідповідальний підхід, коли це стосується мене, і дратує, коли стосується інших.</p>\n\n<ul><li>Як можна релізити не покриту тестами нову версію продукту?</li><li>Хто за це відповідає?</li><li>Хто мав написати тести?</li></ul>\n\n<p>На комерційному проєкті ці питання резонні, в Open Source — ні. Це так звана колективна відповідальність, в якій немає ні героїв, ні поганців.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image8_yP1xPA1.png\"></p>\n\n<h3>Планування</h3>\n\n<p>На відміну від комерційних проєктів, тут немає звичного плану розробки. Немає Jira/Trello-карток, прикріплених до конкретних людей. Це non-paid участь, а отже, ніхто не може встановлювати терміни та вимагати виконання завдань. Це призводить до хаосу, де кожен робить те, що йому заманеться.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image7_0jbWVUN.png\"></p>\n\n<p>Можна заперечити, що, мовляв, є GitHub Projects (Trello «на мінімалках», вбудований у GitHub) і Milestones, які використовують на серйозних проєктах.</p>\n\n<p>Наприклад, <a href=\"https://github.com/gatsbyjs/gatsby\" target=\"_blank\">Gatsby</a> ведуть кілька дощок для різних напрямів, але я ще жодного разу не відкривав ті дошки й не робив якісь зміни з ними. Може, я помиляюсь, але за моїми спостереженнями вони нікому не цікаві з простих контриб’юторів.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/gatsby_project_1.png\"></p>\n\n<p>Напевно, пора прочинити завісу таємниці — <strike>Діда Мороза не існує</strike> ці дошки підтримують «зацікавлені» люди. Інтерес може бути такий:</p>\n\n<ul><li>фінансова підтримка — зі спонсорських внесків;</li><li>ентузіазм — автори ідеї або core-розробники, які просто вболівають за продукт.</li></ul>\n\n<p>У такому разі все працює за правилами комерційної розробки. І якщо з грошовою мотивацією все зрозуміло — працює, поки платять, то з ентузіазмом все неконтрольовано. З цього я зробив висновок, що модель безкоштовного Open Source не може похвалитися стабільністю і планомірністю, що, своєю чергою, впливає на кінцевий продукт і developer experience. В Open Source фінансування досить нове та не поширене явище, тому поки що чекаємо.</p>\n\n<h3>Пінг</h3>\n\n<p>Останнє і, мабуть, найненависніше для мене — це затримка в комунікації. Якщо я зробив PR з фіксом сьогодні, то ніхто не гарантує, що його подивляться, схвалять і змерджать того ж дня. Перша проблема — географічне розташування всіх учасників. У мене розпал робочого настрою, а єдиний товариш, від якого я чекаю LGTM!, ще спить, і навпаки.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image2_8xcjSWS.png\"></p>\n\n<p>На проблему з часовими зонами додатково накладається відсутність зобов’язань, тобто ніхто не зобов’язаний і не буде поспішати відповісти вам, якщо на основній роботі завал. Простий приклад таймінгу, максимально наближений до реальності:</p>\n\n<ul><li>day 0: я створив issue</li><li>day 0: відмітив ключових учасників: @user1, @user2</li><li>day 1: user1 відреагував 👀</li><li>day 2: user2 додав мітку «bug» і прокоментував «Thanks for contribution. I’ll take a look»</li><li>day 5: user1 прокоментував «please add details about X and Y»</li><li>day 6: я додав коментар з деталями по X і Y</li><li>day 7: user1 прокоментував «okay thanks»</li><li>day 12: я прокоментував «any progress»</li><li>day 24: я прокоментував «friendly reminder»</li><li>day 30: я прокоментував «ping ping»</li><li>day 60: user2 прокоментував «was busy for last months, will take a look soon»</li><li>day 60: я прокоментував «sounds great, thanks»</li><li>day 65: user2 прокоментував «PR with fix # 000»</li><li>day 67: issue закрито після успішно прийнятого PR</li></ul>\n\n<p><i>Note: Даруйте за такий формат замість посилань/скріншотів з реальним прикладом, не хочу «палити контору».</i></p>\n\n<h2>Висновок</h2>\n\n<p>Можливо, я вчинив не зовсім коректно, порівнявши Open Source та комерційну розробку. Я не планував розкритикувати або захвалити один з підходів, адже вони безумовно відрізняються, хоча й мають однакову мету — створити продукт. Я дивлюся на світ <i>open</i> source зі світу <i>out</i> source і вирішив поділитись власними спостереженнями, які можуть бути комусь корисні.</p>\n\n<p>Побачимось у коментарях до якогось issue чи PR 😉</p>","contentSnippet":"Суб’єктивний погляд на світ Open Source з позиції простого розробника з двома роками активної участі. Не претендую на істину, не завалюю порадами, тільки структуровані персональні спостереження. Можливо, ця стаття допоможе зрозуміти — бути чи не бути Open Source Contributor’ом, адже краще вчитися на чужому досвіді.\nNote: Наведені приклади розглядаємо в контексті GitHub, тож, прихильники Bitbucket і GitLab, вибачте за «дискримінацію».\nЯк розробник я з самого початку використовував готові рішення зі світу відкритого коду. Це був бездумний Ctrl+C/Ctrl+V команд для встановлення і запуску чужого пакету з документації. Як теля не думає, звідки береться молоко, так і джун не морочиться над тим, хто і як пише ці пакети. Проблема вирішена — закрили таск, не працює — шукаємо далі.\nТакий споживацький підхід — це нормально, капіталізм усе-таки. Проблеми виникають тоді, коли не вдається знайти відповідне рішення. Після багаторазового перечитування документації готових, але не підхожих, рішень постаєш перед вибором:\n\nДовгий час я обирав шлях «написання власних рішень», але коли став більш досвідченим, почав створювати issues і незабаром перейшов до роботи над виправленнями та новим функціоналом. Звичайно, було лячно відразу вносити зміни в код, тому я зайшов з боку документації. Зрозумів, як усе працює, і пробував вирішувати функціональні завдання. Так почався мій шлях в Open Source, і тепер я сприймаю цей світ по-іншому, адже знаю, «звідки молоко» і як зробити краще.\nЗа кілька років я достатньо освоївся в Open Source. Наразі маю три персональних проєкти, за які не соромно (+7 проєктів «так собі»). Очолюю організацію Figma Plugin Helpers і намагаюся побудувати Open Source ком’юніті навколо Figma. Беру активну участь в комітеті i18n проєкту Node.js, де займаюся побудовою процесів локалізації. Ну й безліч разових issues та PR у різних проєктах, з якими випадково стикався. Нижче я виділив деякі недоліки та переваги, які помітив протягом цих років.\nПереваги\nПочну з хорошого. А саме — чому мені подобається витрачати +30 хвилин на день на безкоштовні проєкти з відкритим вихідним кодом.\nРізноманітний досвід у програмуванні\nНезалежно від кваліфікації, займаної посади та розміру інвойсу, кожен розробник обмежений проєктом. Це, своєю чергою, означає, що список використовуваних технологій обраний і статичний. Найближчі зміни стеку трапляться не скоро або взагалі ніколи.\nРутина — головний вбивця інтересу як у щоденній роботі, так і в професії загалом. Наші дбайливі й не дуже керівники щосили намагаються догодити, адже незадоволений співробітник завтра втече до сусідів. Тут тобі й смузі вранці, й електрогітара в офісі, й абонементи в спорткомплекси. Але як би вони не старалися, вирішальним фактором (після зарплати) залишається проєкт. Чи це цікавий стартап на модних фреймворках, чи велика компанія на Angular 1.X, так чи інак настане момент, коли все набридне. Така природа людини — знецінювати все, чим вона володіє, і зазіхати на сусідське.\n\nНабридло писати на своєму стеку? Не поспішай бігати по співбесідах, просто знайди цікавий проєкт у світі Open Source — і вперед.\nNote: Я не проти зміни роботи, але потрібно мислити адекватно. Якщо проєкт об’єктивно хороший, команда класна, проте «набридло одне й те саме», не варто відразу міняти футболку EServe на SoftPAM.\nБувають випадки, коли вже понад рік сидиш на проєкті й не можеш підтримати розмову про інші технології. Щоб не випадати з контексту світових подій, приділяйте по 30 хвилин на Twitter/Habr/DOU. Але як щодо практики? Hackerrank, Codewars, LeetCode та інші платформи допоможуть з алгоритмами, але все одно реальної роботи з патернів програмування, архітектури та іншого не буде. Тут приходить Open Source!\nВеличезний вибір проєктів на будь-який смак, від інді-розробок до трендових фреймворків, від великих monorepo до однофайлових пакетів. Захотілося спробувати новий фреймворк/підхід/мову — глобальний пошук GitHub вже чекає.\n\nСвобода\nХай пробачить вчителька з математики мої старання:\n\nНа роботі A ми зобов’язуємося виконувати x завдань, за винагороду y протягом часу T. Ця формула підходить лише для лабораторних умов у вакуумі. Для застосування її на практиці варто додати коефіцієнт реального життя q, що охоплює додаткові параметри:\n\nНаприклад, мій показник q — це стосунки з колегами та начальством, умови в офісі і його віддаленість від дому, інтерес до проєкту та технологій тощо. Зараз він трохи нижчий за одиницю, але якщо він дорівнює 0 — робота перестає буде цікавою для мене. Хотілось би дізнатись у коментарях, що входить у ваш q і чому він дорівнює наразі.\nЯкщо ж застосувати цей розрахунок на Open Source, то всі змінні будуть викреслені. В цьому і полягає свобода: жодних обмежень, вимог, босів і дедлайнів, тільки цікаві завдання, які можна розв’язати з новим підходом або стеком. З’явилося бажання — покриваю тестами v14 Node.js, якщо завтра набридне, дивитимуся YouTube. І ніхто не сваритиме мене за тести, навіть якщо я ніколи їх не закінчу.\nNote: Вищенаведені формули не більше як літературний прийом. Прохання не шукати в них глибинний зміст або математичне обґрунтування.\nРозвиток soft skills\nОдна голова добре, дві краще, а всі maintainer’и одразу — відмінно, але складно. Працюючи над черговим виправленням або новим функціоналом, звичайно ж, хочеться в результаті залити його в master. Для цього потрібно не лише написати добрий код, а й відстояти свою ідею та довести слушність. У світі Open Source панує демократія, і кожен готовий озвучити свою позицію.\n\nЩо серйозніший проєкт і що активніше в ньому ком’юніті, то більше доведеться спілкуватися. Кожен PR і issue — це нова дискусія, новий шанс потренуватися в мистецтві переконання та попрактикувати англійську.\nКрім комунікативних умінь, ви розвиваєте додатково лідерські якості. Це може бути як створення та управління своїм проєктом, так і лідерські позиції в чужому. Звісно, в особистому проєкті не варто очікувати напливу сотень тисяч користувачів, яких треба координувати. Але щоб правильно відповісти на перший issue, теж необхідна навичка. Наприклад, у моєму найбільш активному персональному проєкті react-microsoft-login за півтора року існування набралося всього 18 issues. Беручи участь у більш масштабних Open Source проєктах від Node.js, Figma, Adobe, я вчуся вести перемовини, керувати командами та бути ментором. Навряд чи я б міг займатися тим самим на основній роботі через специфіку outsource, та й просто тому, що наше діло гребти.\nСамореклама\nПід час роботи над проєктом можна перетнутися з різними людьми по всьому світу, тим самим формуючи мережу знайомств. Звучить трохи популістськи, але зв’язки сильніші за гроші. На них тримається Кремнієва долина, де команда для стартапу формується в черзі за кавою. Тут те саме, тільки онлайн. Подискутували під кількома issues, потім у Slack просиш переглянути твій PR. Слово за слово — і вже ніби знайомі.\nNote: Так-так, великі Open Source проєкти часто мають свій Slack workspace.\nЯк використовувати такі знайомства, вирішувати вам: почати разом стартап або домовитись про безкоштовну ночівлю на випадок подорожей чи просто сказати «шукаю роботу» і отримати гарячу позицію з готовою рекомендацією. У будь-якому разі гірше від таких зв’язків не буде.\nТак, наприклад, я вже маю заплановані походи в бар по всьому світу, два запрошення на конференції як доповідач і ще кілька як слухач.\nТа якщо не вдаватися в романтичні мрії про власну справу і повернутися в галерні будні, то тут теж є вигода. Приходиш на співбесіду, а тобі пропонують каву, печиво та офер, тому що ти Core Contributor у create-react-app. Іншому кандидату з ідентичним досвідом, найімовірніше, доведеться відповідати на банальні запитання на кщталт «Які ви знаєте типи в JavaScript?». Ну, ви розумієте.\n\nКарма\nЯ використовую безкоштовні продукти з відкритим кодом, то чому б не віддати борг батьківщині? Це з розряду чогось особистого, але мені складно залишатися винним. Мені приємно усвідомлювати, що я теж роблю свій внесок і можу допомогти іншим розробникам розв’язати їхні проблеми.\nНедоліки\nТепер перейдімо до «поганих новин». Повна свобода — це величезний плюс, але водночас величезний мінус. Певним чином це анархія, обмежена правилами платформи GitHub. Принижувати та ображати інших учасників не можна, але як будувати процеси розробки, хто головний і що з усім цим робити — ніде не регламентовано. Все це сформувало певні проблеми.\nІєрархія\nПеред початком роботи на будь-якому проєкті завжди добре провести онбординг, щоб розповісти суть, пояснити ключові технічні моменти та познайомити з командою. На останньому етапі, як правило, я дізнаюсь, хто на проєкті бос, хто сусід, а хто каву приносить. Іншими словами, «вивчаю ієрархію». Так ось в Open Source цих ролей немає, від чого складно орієнтуватися в просторі та що-небудь робити, принаймні спочатку.\nПам’ятаю, як протягом двох тижнів я намагався зрозуміти, хто головний у перекладах у Node.js. Питав у всіх підряд про процеси, про те, як правильно і неправильно робити, і хто може перевірити мою роботу. В результаті усе з’ясував і так занурився в ті справи, що зараз очолюю їх. Зрозуміти, як усе влаштовано в проєкті, зайняло в мене немало часу. Я й досі не розумію всіх аспектів і не знаю, в кого спитати про них.\nЯкщо прочитати всі contribution.md і взяти участь у кількох обговореннях, можна визначити активних учасників і «теоретичних» босів. Здавалося б, усе, питання вирішене, але ні! Ніхто ні за що не відповідає ні в межах проєкту, ні в межах окремого завдання. Немає керівника, який призначить таск і дедлайн, немає виконавця, який зобов’язаний закрити issue. Як від мене ніхто не може вимагати написання тестів для v14 Node.js, так і я не можу вимагати цього від інших. Тож може статися так, що ці тести ніхто й ніколи не напише.\nТрохи лицемірства: мені подобається безвідповідальний підхід, коли це стосується мене, і дратує, коли стосується інших.\nЯк можна релізити не покриту тестами нову версію продукту?\nХто за це відповідає?\nХто мав написати тести?\n\n\nНа комерційному проєкті ці питання резонні, в Open Source — ні. Це так звана колективна відповідальність, в якій немає ні героїв, ні поганців.\n\nПланування\nНа відміну від комерційних проєктів, тут немає звичного плану розробки. Немає Jira/Trello-карток, прикріплених до конкретних людей. Це non-paid участь, а отже, ніхто не може встановлювати терміни та вимагати виконання завдань. Це призводить до хаосу, де кожен робить те, що йому заманеться.\n\nМожна заперечити, що, мовляв, є GitHub Projects (Trello «на мінімалках», вбудований у GitHub) і Milestones, які використовують на серйозних проєктах.\nНаприклад, Gatsby ведуть кілька дощок для різних напрямів, але я ще жодного разу не відкривав ті дошки й не робив якісь зміни з ними. Може, я помиляюсь, але за моїми спостереженнями вони нікому не цікаві з простих контриб’юторів.\n\nНапевно, пора прочинити завісу таємниці — Діда Мороза не існує ці дошки підтримують «зацікавлені» люди. Інтерес може бути такий:\nфінансова підтримка — зі спонсорських внесків;\nентузіазм — автори ідеї або core-розробники, які просто вболівають за продукт.\n\n\nУ такому разі все працює за правилами комерційної розробки. І якщо з грошовою мотивацією все зрозуміло — працює, поки платять, то з ентузіазмом все неконтрольовано. З цього я зробив висновок, що модель безкоштовного Open Source не може похвалитися стабільністю і планомірністю, що, своєю чергою, впливає на кінцевий продукт і developer experience. В Open Source фінансування досить нове та не поширене явище, тому поки що чекаємо.\nПінг\nОстаннє і, мабуть, найненависніше для мене — це затримка в комунікації. Якщо я зробив PR з фіксом сьогодні, то ніхто не гарантує, що його подивляться, схвалять і змерджать того ж дня. Перша проблема — географічне розташування всіх учасників. У мене розпал робочого настрою, а єдиний товариш, від якого я чекаю LGTM!, ще спить, і навпаки.\n\nНа проблему з часовими зонами додатково накладається відсутність зобов’язань, тобто ніхто не зобов’язаний і не буде поспішати відповісти вам, якщо на основній роботі завал. Простий приклад таймінгу, максимально наближений до реальності:\nday 0: я створив issue\nday 0: відмітив ключових учасників: @user1, @user2\nday 1: user1 відреагував 👀\nday 2: user2 додав мітку «bug» і прокоментував «Thanks for contribution. I’ll take a look»\nday 5: user1 прокоментував «please add details about X and Y»\nday 6: я додав коментар з деталями по X і Y\nday 7: user1 прокоментував «okay thanks»\nday 12: я прокоментував «any progress»\nday 24: я прокоментував «friendly reminder»\nday 30: я прокоментував «ping ping»\nday 60: user2 прокоментував «was busy for last months, will take a look soon»\nday 60: я прокоментував «sounds great, thanks»\nday 65: user2 прокоментував «PR with fix # 000»\nday 67: issue закрито після успішно прийнятого PR\n\n\nNote: Даруйте за такий формат замість посилань/скріншотів з реальним прикладом, не хочу «палити контору».\nВисновок\nМожливо, я вчинив не зовсім коректно, порівнявши Open Source та комерційну розробку. Я не планував розкритикувати або захвалити один з підходів, адже вони безумовно відрізняються, хоча й мають однакову мету — створити продукт. Я дивлюся на світ open source зі світу out source і вирішив поділитись власними спостереженнями, які можуть бути комусь корисні.\nПобачимось у коментарях до якогось issue чи PR 😉"}},{"node":{"link":"https://dou.ua/lenta/articles/binary-studio-academy-intern/","title":"Шлях стажера: Binary Studio Academy","pubDate":"Mon, 22 Apr 2019 14:27:46 +0300","content":"<p>Привіт! Мене звати Олександр, я працюю full-stack розробником, <a href=\"https://dou.ua/users/aleksandr-tovmach/articles/\" target=\"_blank\">пишу статті</a>, допомагаю на <a href=\"https://ru.stackoverflow.com/users/312473/alexandr-tovmach\" target=\"_blank\">StackOverflow</a> і беру участь у кількох <a href=\"https://www.npmjs.com/package/react-microsoft-login\" target=\"_blank\">open-source</a> проектах. У цій статті хотів би розповісти про свій досвід навчання в <a href=\"https://academy.binary-studio.com/ru/\" target=\"_blank\">Binary Studio Academy</a>. Поділюся інсайтами, порадами, чого чекати, як готуватися й дійти до кінця.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/920_mCu2TjG.jpg\"></p>\n\n<h2>З чого все починалося</h2>\n\n<p>Моя освіта не була пов’язана з IT, тож мої знання з програмування обмежувалися домашніми потребами, наприклад, перевстановленням Windows. За <nobr>6-7</nobr> місяців до того, як анонс набору до академії потрапив мені на очі, я вперше відкрив для себе HTML, CSS і JavaScript. Пройшовши всі безкоштовні уроки на <a href=\"https://htmlacademy.ru/\" target=\"_blank\">HTML-Academy</a> й наполовину опанувавши <a href=\"https://learn.javascript.ru/\" target=\"_blank\">онлайн-підручник</a> із JavaScript, я почав шукати способи практикуватися, і саме тоді з’явилися перші проблеми:</p>\n\n<ul><li>Мій код працює, але чи правильно він оформлений?</li><li>Мій код не працює, і я не знаю, як це вирішити.</li><li>Мої роботи прості й не можуть називатися проектом.</li></ul>\n\n<p>Тимчасовим рішенням були відеоуроки/підкасти на YouTube, де розробники діляться досвідом, показують, що таке «хороший код» і як його досягти. Після кількох переглянутих відео я здійснив тотальний рефакторинг свого коду (хоча тоді навіть не знав слова «рефакторинг»). Але все ще не був упевнений у всьому коді, оскільки виправляв лише те, на що звертали увагу автори відео.</p>\n\n<p>Після марних спроб знайти сервіс, який би розв’язував усі мої проблеми одним заходом, я змінив свій запит у Google:</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image1_icZWfdA.gif\" style=\"margin: 0 auto;\"></p>\n\n<p>Серед результатів були різні варіанти, зокрема Coursera/Prometheus, які, на мій погляд, є лише розширеною версією YouTube, тож я проігнорував їх. А згодом натрапив на Binary Studio Academy. Швидко переглянувши умови, не одразу повірив, що такий курс може бути безкоштовним. Але уважно перечитавши FAQ, переконався в правдивості й з радістю зареєструвався на JavaScript напрям.</p>\n\n<h2>Підготовка до вступного тестування</h2>\n\n<p>Відбір до академії складається з трьох етапів: онлайнового тестування обсягом приблизно 30 запитань з основ програмування, зокрема й з ООП і баз даних; трьох відеолекцій та домашніх завдань до них і невеличкої співбесіди з HR компанії.</p>\n\n<p>Після реєстрування в особистому кабінеті академії на мене чекали подальші інструкції та матеріали для підготовки до вступного онлайнового тестування. Я був приємно здивований тим, що серед рекомендованих матеріалів був саме той підручник, над яким я вже працював. А теми з HTML/CSS я пройшов раніше, тому сфокусувався на тесті й тих сферах, у яких не розбирався зовсім — бази даних та ООП.</p>\n\n<p>У процесі підготовки:</p>\n\n<ul><li>встановив Apache сервер на ПК для тренування MySQL;</li><li>проходив різні туторіали із SQL;</li><li>кілька разів перечитав статті на Вікіпедії про терміни ООП;</li><li>двічі проходив демотест.</li></ul>\n\n<p>Завдяки зробленому я почав розуміти, що таке «клієнт», «сервер» і «база даних» та як вони взаємодіють між собою. Отож ще до початку безпосереднього навчання вже одержував користь. До речі, демотест був у кілька разів простішим за реальний тест, про що не раз згадували на сайті. І це мене дуже насторожувало, тому що складно було оцінити свої реальні сили й можливості. Але водночас це стимулювало не зупинятися на досягнутому й вчитися більше.</p>\n\n<h2>Відбір</h2>\n\n<p>Для онлайнового тестування запропонували два дні на вибір, і я вирішив складати в останній день, щоб мати якомога більше часу на підготовку. Академія відбувається лише раз на рік, і я хвилювався, як перед будь-яким важливим іспитом у моєму житті, тому що занадто багато було поставлено на карту.</p>\n\n<p>Початок тесту, я цілком готовий: вимкнув телефон, закрив усі вкладки в браузері, зібрався з думками ― і вперед. Згодом дізнався, що найбільші проблеми абітурієнтів під час тестування ― це неуважність, спроби гуглити й несерйозний підхід у цілому. Тому ось кілька порад:</p>\n\n<ul><li>виберіть час, коли вас нічого не відволікатиме;</li><li>подбайте про стабільне під’єднання до інтернету, достатній заряд ноутбука та інші зовнішні фактори;</li><li>вимкніть телефон і месенджери;</li><li>не намагайтеся гуглити, це мало вам допоможе;</li><li>не переходьте між вкладками, навіть щоб вимкнути музику або зупинити відео на YouTube. Усе це потрібно зробити ще до початку тесту;</li><li>не поспішайте виконати завдання щонайшвидше, тому що неправильна відповідь за тридцять секунд гірша, ніж правильна за п’ять хвилин.</li></ul>\n\n<p>Попри те, що поради досить прості й очевидні, чомусь десь 30% абітурієнтів припускаються тієї самої помилки. За тиждень я одержав листа з новиною про те, що тест складено успішно й далі на мене чекають вступні онлайнові лекції з домашніми завданнями. Я неймовірно радів, тому що перший крок був позаду й тепер тільки вперед.</p>\n\n<p>Перші лекції другого відбіркового етапу розповідали про Git, ES6 та MongoDB. Вони не здалися мені занадто складними, тож виконавши основне завдання, я робив альтернативну або доповнену версію розв’язання до кожної лекції. Так, наприклад, у завданні з ES6 і прототипування в JavaScript додатково використовував HTML/CSS, роботу з DOM й Adobe Photoshop, і <a href=\"https://fighting-task.firebaseapp.com/\" target=\"_blank\">от що вийшло</a>:</p>\n\n<div align=\"center\"><video autoplay loop=\"loop\" muted=\"muted\" onclick=\"this.play()\" src=\"https://s.dou.ua/storage-files/boyJ.mp4\"></video></div>\n\n<p>Звісно, із моїм теперішнім досвідом я бачу всі баги в цій роботі та знаю, що можна покращити, але вирішив залишити все як є заради історії.</p>\n\n<p>Що можу порекомендувати для цього етапу:</p>\n\n<ul><li>не забувайте, що відео з лекцією ― це не єдине джерело знань, і шукайте додаткову інформацію самостійно;</li><li>дотримуйтеся дедлайнів ― це дуже важливо;</li><li>не бійтеся ставити запитання викладачам, вони з радістю допоможуть;</li><li>за можливості намагайтеся зробити більше, ніж від вас чекають, ― це ефективний спосіб вирізнитися.</li></ul>\n\n<p>Цікава історія. На останнє завдання я одержав фідбек від викладача, у якому йшлося про те, що розв’язання не є оптимальним і його можна поліпшити. Я почав вести діалог, одержав кілька порад і посилань на «почитати», та найголовніше ― це був перший справжній розробник, із яким мені випало поспілкуватися. Завдяки йому я значно поліпшив свою відповідь й одержав десять балів із десяти. «І що ж тут цікавого?» ― запитаєте ви. Просто все це відбувалося пізно вночі, і менторові було не ліньки зі мною чатитися. Дізнавшись, що він буде очолювати команду студентів, я вирішив, що неодмінно маю бути в ній.</p>\n\n<p>За результатами тесту й перших домашок я подолав відбірковий етап. І після невеликого інтерв’ю з представником Binary Studio в скайпі став студентом академії та одержав запрошення на першу лекцію в офісі компанії у Львові.</p>\n\n<h2>Початок навчання та лекції</h2>\n\n<p>Відкриття академії й перша лекція відбувалися у львівському офісі компанії. Попри те, що присутність була необов’язковою, я твердо вирішив, що маю там бути, — і не дарма. Я вперше завітав до офісу IT-компанії й був під величезним враженням: від таких самих ідейних студентів, як я, від тренерів, готових ділитися знаннями й відкритих до дружнього спілкування, та від усієї атмосфери в цілому.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/2_et8B95S.jpg\"></p>\n\n<p>Після повернення зі Львова важке літо з безсонними ночами, лекціями та домашками з академії офіційно розпочалося. Було складно, але круто. Як я люблю казати ― буде, що згадати. У кожному домашньому завданні я намагався видати максимум, показати все, що можу й знаю. Що далі, то складнішими ставали завдання, усе важче було вкладатися в терміни, і поступово такі темпи почали вибивати тих, хто не був готовий. Звісно, мені було сумно бачити, як студенти, із якими познайомився на першій лекції, просто здавалися або були відраховані за неуспішність, але я знав, що зможу, і не кидав навчання.</p>\n\n<p>Найголовнішою відмінністю академії від усього мого попереднього досвіду самоосвіти була можливість спілкуватися. Це найбільший плюс, який я намагався використовувати на повну. Я обговорював питання з іншими студентами, діставав своєю цікавістю викладачів і в цілому намагався взяти якомога більше того, чого мені так бракувало раніше.</p>\n\n<p>Коли етап лекцій завершився, ми мали кілька днів перерви перед проектом, які після місяця безперервного навчання були як курорт на Мальдівах. Я використав їх, щоб підтягнути те, у чому не почувався впевнено, а такого було багато. Я переглядав лекції, читав запропоновані ресурси/книжки й у такий спосіб зберігав набрані мною темпи.</p>\n\n<p>З усіх порад для подолання етапу лекцій можу виокремити основні:</p>\n\n<ul><li>плануй свій час і не відкладай до останнього;</li><li>спілкуйся з іншими студентами;</li><li>не соромся запитувати викладача;</li><li>допомагай іншим порадами.</li></ul>\n\n<h2>Проект</h2>\n\n<p>Далі почався проект, який є головною фішкою Binary Studio Academy. Ми розробляли спортивну соцмережу на MEAN стеку з нуля. Головна ідея продукту полягала в тому, щоб зробити інформацію про спорт, здорове харчування та спосіб життя доступною й дати змогу зберігати всі важливі показники та дані в одному місці.</p>\n\n<p>Тут було все: щоденні розмови телефоном із командою, планування, таски, дедлайни, презентації, код, рев’ю й фідбеки від замовників (якими виступали менеджери Binary Studio) та відкати версій — і все по-справжньому.<br>Окремо хотілося б відзначити командну роботу, із якою не так усе просто. Кожен член команди має свою думку, мотиви та здібності. Однак настає мить, коли всім треба зібратися в одну бойову одиницю й створити продукт. На початку мені це здавалося просто неможливим і нагадувало байку про лебедя, рака та щуку, але із часом завдяки грамотному розподіленню ролей, організації процесів і мотиваційній тренерській роботі нам це вдалося:</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image2_rSZpfcY.png\" style=\"width: 920px;\"></p>\n\n<p>Поради для роботи над проектом:</p>\n\n<ul><li>будь ініціативним і не бійся висловлювати власну думку;</li><li>бери завдання, які тобі здаються складними (звісно, якщо терміни дають змогу), тому що в подоланні перешкод і полягає навчання;</li><li>пам’ятай, що ти ― частина команди, не соромся просити допомоги в інших і завжди будь готовим допомогти сам;</li><li>не забувай, що твої помилки впливають на всю команду, тому слід розуміти подвійну відповідальність.</li></ul>\n\n<h2>Завершення академії</h2>\n\n<p>Розробка проектів тривала шість тижнів. Студентів, які дійшли до цього етапу, знову запросили до львівського офісу на випускний, де кожна група презентувала результати своєї кропіткої роботи. Я дуже хвилювався, адже до цієї миті ми з командою довго йшли крізь різні випробування й труднощі. Ми вклали купу сил і душу в цей продукт, і тепер треба було показати його всім. Однак наша команда впоралася й охоче відповідала на запитання публіки. Було приємно бачити, що твоя робота цікава й гідно оцінена.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/1_CD6esYj.jpg\"></p>\n\n<p>Презентуючи, потрібно бути готовим до всього й не панікувати, якщо щось піде не так, тому що обов’язково щось піде не так. Головне ― уміти розв’язувати проблеми чи принаймні правильно на них реагувати.</p>\n\n<h2>Життя після академії</h2>\n\n<p>Наприкінці навчання в академії зі мною зв’язалася HR компанії Binary Studio з пропозицією про роботу. Усього лише за три місяці навчання я одержав не тільки знання та практичний досвід, а ще й офер. Я погодився. За тиждень уже приїхав до Львова, де мені допомогли знайти житло та облаштуватися. Тепер я міг називати свого тренера колегою й бути в офісі не гостем, а частиною команди.</p>\n\n<p>Нині планую брати участь у проведенні Академії-2019, можливо, уже як лектор та/або коуч, щоб поділитися здобутим досвідом і допомогти комусь стати справжнім інженером, готовим до викликів сучасного розроблення.</p>\n\n<h2>Висновки</h2>\n\n<p>Академія не для тих, хто шукає швидкої й легкої перемоги. Але я впевнений, що всі зусилля не минають дарма. Два з половиною місяці інтенсивної практики можуть бути ефективнішими, аніж роки самонавчання, якщо скористатися всіма можливостями, які дає цей курс.</p>","contentSnippet":"Привіт! Мене звати Олександр, я працюю full-stack розробником, пишу статті, допомагаю на StackOverflow і беру участь у кількох open-source проектах. У цій статті хотів би розповісти про свій досвід навчання в Binary Studio Academy. Поділюся інсайтами, порадами, чого чекати, як готуватися й дійти до кінця.\n\nЗ чого все починалося\nМоя освіта не була пов’язана з IT, тож мої знання з програмування обмежувалися домашніми потребами, наприклад, перевстановленням Windows. За 6-7 місяців до того, як анонс набору до академії потрапив мені на очі, я вперше відкрив для себе HTML, CSS і JavaScript. Пройшовши всі безкоштовні уроки на HTML-Academy й наполовину опанувавши онлайн-підручник із JavaScript, я почав шукати способи практикуватися, і саме тоді з’явилися перші проблеми:\nМій код працює, але чи правильно він оформлений?\nМій код не працює, і я не знаю, як це вирішити.\nМої роботи прості й не можуть називатися проектом.\n\n\nТимчасовим рішенням були відеоуроки/підкасти на YouTube, де розробники діляться досвідом, показують, що таке «хороший код» і як його досягти. Після кількох переглянутих відео я здійснив тотальний рефакторинг свого коду (хоча тоді навіть не знав слова «рефакторинг»). Але все ще не був упевнений у всьому коді, оскільки виправляв лише те, на що звертали увагу автори відео.\nПісля марних спроб знайти сервіс, який би розв’язував усі мої проблеми одним заходом, я змінив свій запит у Google:\n\nСеред результатів були різні варіанти, зокрема Coursera/Prometheus, які, на мій погляд, є лише розширеною версією YouTube, тож я проігнорував їх. А згодом натрапив на Binary Studio Academy. Швидко переглянувши умови, не одразу повірив, що такий курс може бути безкоштовним. Але уважно перечитавши FAQ, переконався в правдивості й з радістю зареєструвався на JavaScript напрям.\nПідготовка до вступного тестування\nВідбір до академії складається з трьох етапів: онлайнового тестування обсягом приблизно 30 запитань з основ програмування, зокрема й з ООП і баз даних; трьох відеолекцій та домашніх завдань до них і невеличкої співбесіди з HR компанії.\nПісля реєстрування в особистому кабінеті академії на мене чекали подальші інструкції та матеріали для підготовки до вступного онлайнового тестування. Я був приємно здивований тим, що серед рекомендованих матеріалів був саме той підручник, над яким я вже працював. А теми з HTML/CSS я пройшов раніше, тому сфокусувався на тесті й тих сферах, у яких не розбирався зовсім — бази даних та ООП.\nУ процесі підготовки:\nвстановив Apache сервер на ПК для тренування MySQL;\nпроходив різні туторіали із SQL;\nкілька разів перечитав статті на Вікіпедії про терміни ООП;\nдвічі проходив демотест.\n\n\nЗавдяки зробленому я почав розуміти, що таке «клієнт», «сервер» і «база даних» та як вони взаємодіють між собою. Отож ще до початку безпосереднього навчання вже одержував користь. До речі, демотест був у кілька разів простішим за реальний тест, про що не раз згадували на сайті. І це мене дуже насторожувало, тому що складно було оцінити свої реальні сили й можливості. Але водночас це стимулювало не зупинятися на досягнутому й вчитися більше.\nВідбір\nДля онлайнового тестування запропонували два дні на вибір, і я вирішив складати в останній день, щоб мати якомога більше часу на підготовку. Академія відбувається лише раз на рік, і я хвилювався, як перед будь-яким важливим іспитом у моєму житті, тому що занадто багато було поставлено на карту.\nПочаток тесту, я цілком готовий: вимкнув телефон, закрив усі вкладки в браузері, зібрався з думками ― і вперед. Згодом дізнався, що найбільші проблеми абітурієнтів під час тестування ― це неуважність, спроби гуглити й несерйозний підхід у цілому. Тому ось кілька порад:\nвиберіть час, коли вас нічого не відволікатиме;\nподбайте про стабільне під’єднання до інтернету, достатній заряд ноутбука та інші зовнішні фактори;\nвимкніть телефон і месенджери;\nне намагайтеся гуглити, це мало вам допоможе;\nне переходьте між вкладками, навіть щоб вимкнути музику або зупинити відео на YouTube. Усе це потрібно зробити ще до початку тесту;\nне поспішайте виконати завдання щонайшвидше, тому що неправильна відповідь за тридцять секунд гірша, ніж правильна за п’ять хвилин.\n\n\nПопри те, що поради досить прості й очевидні, чомусь десь 30% абітурієнтів припускаються тієї самої помилки. За тиждень я одержав листа з новиною про те, що тест складено успішно й далі на мене чекають вступні онлайнові лекції з домашніми завданнями. Я неймовірно радів, тому що перший крок був позаду й тепер тільки вперед.\nПерші лекції другого відбіркового етапу розповідали про Git, ES6 та MongoDB. Вони не здалися мені занадто складними, тож виконавши основне завдання, я робив альтернативну або доповнену версію розв’язання до кожної лекції. Так, наприклад, у завданні з ES6 і прототипування в JavaScript додатково використовував HTML/CSS, роботу з DOM й Adobe Photoshop, і от що вийшло:\n\nЗвісно, із моїм теперішнім досвідом я бачу всі баги в цій роботі та знаю, що можна покращити, але вирішив залишити все як є заради історії.\nЩо можу порекомендувати для цього етапу:\nне забувайте, що відео з лекцією ― це не єдине джерело знань, і шукайте додаткову інформацію самостійно;\nдотримуйтеся дедлайнів ― це дуже важливо;\nне бійтеся ставити запитання викладачам, вони з радістю допоможуть;\nза можливості намагайтеся зробити більше, ніж від вас чекають, ― це ефективний спосіб вирізнитися.\n\n\nЦікава історія. На останнє завдання я одержав фідбек від викладача, у якому йшлося про те, що розв’язання не є оптимальним і його можна поліпшити. Я почав вести діалог, одержав кілька порад і посилань на «почитати», та найголовніше ― це був перший справжній розробник, із яким мені випало поспілкуватися. Завдяки йому я значно поліпшив свою відповідь й одержав десять балів із десяти. «І що ж тут цікавого?» ― запитаєте ви. Просто все це відбувалося пізно вночі, і менторові було не ліньки зі мною чатитися. Дізнавшись, що він буде очолювати команду студентів, я вирішив, що неодмінно маю бути в ній.\nЗа результатами тесту й перших домашок я подолав відбірковий етап. І після невеликого інтерв’ю з представником Binary Studio в скайпі став студентом академії та одержав запрошення на першу лекцію в офісі компанії у Львові.\nПочаток навчання та лекції\nВідкриття академії й перша лекція відбувалися у львівському офісі компанії. Попри те, що присутність була необов’язковою, я твердо вирішив, що маю там бути, — і не дарма. Я вперше завітав до офісу IT-компанії й був під величезним враженням: від таких самих ідейних студентів, як я, від тренерів, готових ділитися знаннями й відкритих до дружнього спілкування, та від усієї атмосфери в цілому.\n\nПісля повернення зі Львова важке літо з безсонними ночами, лекціями та домашками з академії офіційно розпочалося. Було складно, але круто. Як я люблю казати ― буде, що згадати. У кожному домашньому завданні я намагався видати максимум, показати все, що можу й знаю. Що далі, то складнішими ставали завдання, усе важче було вкладатися в терміни, і поступово такі темпи почали вибивати тих, хто не був готовий. Звісно, мені було сумно бачити, як студенти, із якими познайомився на першій лекції, просто здавалися або були відраховані за неуспішність, але я знав, що зможу, і не кидав навчання.\nНайголовнішою відмінністю академії від усього мого попереднього досвіду самоосвіти була можливість спілкуватися. Це найбільший плюс, який я намагався використовувати на повну. Я обговорював питання з іншими студентами, діставав своєю цікавістю викладачів і в цілому намагався взяти якомога більше того, чого мені так бракувало раніше.\nКоли етап лекцій завершився, ми мали кілька днів перерви перед проектом, які після місяця безперервного навчання були як курорт на Мальдівах. Я використав їх, щоб підтягнути те, у чому не почувався впевнено, а такого було багато. Я переглядав лекції, читав запропоновані ресурси/книжки й у такий спосіб зберігав набрані мною темпи.\nЗ усіх порад для подолання етапу лекцій можу виокремити основні:\nплануй свій час і не відкладай до останнього;\nспілкуйся з іншими студентами;\nне соромся запитувати викладача;\nдопомагай іншим порадами.\n\n\nПроект\nДалі почався проект, який є головною фішкою Binary Studio Academy. Ми розробляли спортивну соцмережу на MEAN стеку з нуля. Головна ідея продукту полягала в тому, щоб зробити інформацію про спорт, здорове харчування та спосіб життя доступною й дати змогу зберігати всі важливі показники та дані в одному місці.\nТут було все: щоденні розмови телефоном із командою, планування, таски, дедлайни, презентації, код, рев’ю й фідбеки від замовників (якими виступали менеджери Binary Studio) та відкати версій — і все по-справжньому.\nОкремо хотілося б відзначити командну роботу, із якою не так усе просто. Кожен член команди має свою думку, мотиви та здібності. Однак настає мить, коли всім треба зібратися в одну бойову одиницю й створити продукт. На початку мені це здавалося просто неможливим і нагадувало байку про лебедя, рака та щуку, але із часом завдяки грамотному розподіленню ролей, організації процесів і мотиваційній тренерській роботі нам це вдалося:\n\nПоради для роботи над проектом:\nбудь ініціативним і не бійся висловлювати власну думку;\nбери завдання, які тобі здаються складними (звісно, якщо терміни дають змогу), тому що в подоланні перешкод і полягає навчання;\nпам’ятай, що ти ― частина команди, не соромся просити допомоги в інших і завжди будь готовим допомогти сам;\nне забувай, що твої помилки впливають на всю команду, тому слід розуміти подвійну відповідальність.\n\n\nЗавершення академії\nРозробка проектів тривала шість тижнів. Студентів, які дійшли до цього етапу, знову запросили до львівського офісу на випускний, де кожна група презентувала результати своєї кропіткої роботи. Я дуже хвилювався, адже до цієї миті ми з командою довго йшли крізь різні випробування й труднощі. Ми вклали купу сил і душу в цей продукт, і тепер треба було показати його всім. Однак наша команда впоралася й охоче відповідала на запитання публіки. Було приємно бачити, що твоя робота цікава й гідно оцінена.\n\nПрезентуючи, потрібно бути готовим до всього й не панікувати, якщо щось піде не так, тому що обов’язково щось піде не так. Головне ― уміти розв’язувати проблеми чи принаймні правильно на них реагувати.\nЖиття після академії\nНаприкінці навчання в академії зі мною зв’язалася HR компанії Binary Studio з пропозицією про роботу. Усього лише за три місяці навчання я одержав не тільки знання та практичний досвід, а ще й офер. Я погодився. За тиждень уже приїхав до Львова, де мені допомогли знайти житло та облаштуватися. Тепер я міг називати свого тренера колегою й бути в офісі не гостем, а частиною команди.\nНині планую брати участь у проведенні Академії-2019, можливо, уже як лектор та/або коуч, щоб поділитися здобутим досвідом і допомогти комусь стати справжнім інженером, готовим до викликів сучасного розроблення.\nВисновки\nАкадемія не для тих, хто шукає швидкої й легкої перемоги. Але я впевнений, що всі зусилля не минають дарма. Два з половиною місяці інтенсивної практики можуть бути ефективнішими, аніж роки самонавчання, якщо скористатися всіма можливостями, які дає цей курс."}},{"node":{"link":"https://dou.ua/lenta/articles/gatsbyjs-guide/","title":"Детально про Gatsby.js – інструмент для створення складних веб-сайтів","pubDate":"Fri, 01 Mar 2019 10:00:03 +0200","content":"<p>Як відомо, на одних бойлерплейтах далеко не заїдеш, тому доводиться лізти вглиб будь-якої технології, щоб навчитися писати щось вартісне. У цій статті розглянемо деталі Gatsby.js, знання яких дозволить вам створювати і підтримувати складні веб-сайти і блоги.</p>\n\n<p>Теми, розглянуті нижче:</p>\n\n<ul><li><a class=\"anchor\" href=\"#one\">Структура сторінок і роутинг</a></li><li><a class=\"anchor\" href=\"#two\">Компоненти, шаблони та їх взаємодія</a></li><li><a class=\"anchor\" href=\"#three\">Робота з даними</a></li><li><a class=\"anchor\" href=\"#four\">Плагіни</a></li><li><a class=\"anchor\" href=\"#five\">Стилізація сайту</a></li><li><a class=\"anchor\" href=\"#six\">SEO-оптимізація з використанням react-helmet</a></li><li><a class=\"anchor\" href=\"#seven\">Налаштування PWA</a></li></ul>\n\n<h2>Підготовка</h2>\n\n<p><details><summary>Встановлення Gatsby на ПК</summary><pre>yarn global add gatsby-cli</pre></details><details><summary>Клонування мінімального проекту</summary><pre>npx gatsby new gatsby-tutorial https://github.com/gatsbyjs/gatsby-starter-hello-world\r\ncd gatsby-tutorial</pre></details><details><summary>Ініціалізація репозиторію</summary><pre>git init\r\ngit add .\r\ngit commit -m \"init commit\"</pre></details><details><summary>Перевірка справності</summary><pre>yarn start</pre><p>Якщо в консолі немає помилок, а в браузері на <a href=\"http://localhost:8000/\" target=\"_blank\">http://localhost:8000</a> видніється «Hello world!» ― значить все працює справно. Можна спробувати змінити вміст файлу <em>/src/pages/index.js</em>, щоб перевірити hot-reload.</p></details></p>\n\n<h2 id=\"one\">Структура сторінок і роутинг</h2>\n\n<p>Щоб створити сторінку в Gatsby, досить просто помістити новий файл в папку <em>/src/pages</em>, та його буде скомпільовано в окрему HTML-сторінку. <strong>Важливо зауважити, що URL до цієї сторінки буде відповідати фактичному шляху з назвою.</strong> Наприклад, додамо ще кілька сторінок:</p>\n\n<pre>src\r\n└── pages\r\n    ├── about.js\r\n    ├── index.js\r\n    └── tutorial\r\n        ├── part-four.js\r\n        ├── part-one.js\r\n        ├── part-three.js\r\n        ├── part-two.js\r\n        └── part-zero.js</pre>\n\n<p>Контент поки не важливий, тому можна використовувати будь-який текст задля того, щоб розрізняти сторінки:</p>\n\n<pre>import React from \"react\";\r\n\r\nexport default () =&gt; &lt;div&gt;Welcome to tutorial/part-one&lt;/div&gt;;</pre>\n\n<p>Перевіряємо в браузері:</p>\n\n<ul><li><a href=\"http://localhost:8000/tutorial/part-one\" target=\"_blank\">localhost:8000/tutorial/part-one</a></li><li><a href=\"http://localhost:8000/about\" target=\"_blank\">localhost:8000/about</a></li></ul>\n\n<p>Ось таким чином можна, структуруючи файли, водночас вирішувати питання роутингу.</p>\n\n<p><span style=\"margin-left: 30px; display: inline-block;\"><em>Також існує спеціальний <strong>createPage API</strong>, за допомогою якого можна більш гнучко керувати шляхами і назвами сторінок, але для роботи з ним нам знадобиться розуміння роботи даних в Gatsby, тому розглянемо його трохи далі в статті.</em></span></p>\n\n<p>Зв’яжемо створені сторінки за допомогою посилань ― для цього скористаємося компонентом <code>&lt;Link /&gt;</code> з пакета Gatsby, який створений спеціально для внутрішньої навігації. Для всіх зовнішніх посилань слід використовувати звичайний <code>&lt;a&gt;</code> тег.</p>\n\n<p><em>/src/pages/index.js</em></p>\n\n<pre>import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\n\r\nexport default () =&gt; (\r\n  &lt;div&gt;\r\n    &lt;ul&gt;\r\n      &lt;li&gt;\r\n        &lt;Link to=\"/about\"&gt;about&lt;/Link&gt;\r\n      &lt;/li&gt;\r\n      &lt;li&gt;\r\n        &lt;Link to=\"/tutorial/part-zero\"&gt;Part #0&lt;/Link&gt;\r\n      &lt;/li&gt;\r\n      &lt;li&gt;\r\n        &lt;Link to=\"/tutorial/part-one\"&gt;Part #1&lt;/Link&gt;\r\n      &lt;/li&gt;\r\n      &lt;li&gt;\r\n        &lt;Link to=\"/tutorial/part-two\"&gt;Part #2&lt;/Link&gt;\r\n      &lt;/li&gt;\r\n      &lt;li&gt;\r\n        &lt;Link to=\"/tutorial/part-three\"&gt;Part #3&lt;/Link&gt;\r\n      &lt;/li&gt;\r\n      &lt;li&gt;\r\n        &lt;Link to=\"/tutorial/part-four\"&gt;Part #4&lt;/Link&gt;\r\n      &lt;/li&gt;\r\n    &lt;/ul&gt;\r\n  &lt;/div&gt;\r\n);</pre>\n\n<p><span style=\"margin-left: 30px; display: inline-block;\"><em><code>&lt;Link&gt;</code> під капотом має дуже хитрий механізм щодо оптимізації завантаження сторінок і тому використовується замість <code>&lt;a&gt;</code> для навігації по сайту. Детальніше можна почитати <a href=\"https://www.gatsbyjs.org/docs/gatsby-link/\" target=\"_blank\">тут</a>.</em></span></p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image1_pHFvnKH.gif\"></p>\n\n<p>Сторінки створені, посилання додані. Схоже, що з навігацією закінчили.</p>\n\n<h2 id=\"two\">Компоненти, шаблони та їх взаємодія</h2>\n\n<p>Як відомо, в будь-якому проекті завжди є елементи, що повторюються. Для веб-сайтів це хедер, футер, навігаційна панель. Також сторінки, незалежно від контенту, будуються за заданою структурою. Так як <strong>Gatsby</strong> — це компілятор для <strong> React</strong> , тут використовується той самий компонентний підхід для вирішення цих проблем.</p>\n\n<p>Створимо компоненти для хедера та навігаційної панелі:</p>\n\n<p><em>/src/components/header.js</em></p>\n\n<pre>import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\n\r\n/**\r\n * Зверніть увагу на те, що зображення для логотипу\r\n * імпортується так само, як і в звичайному React-проекті.\r\n * Це тимчасове і не оптимальне рішення, тому що картинка\r\n * поставляється \"як є\". Трохи далі ми розглянемо\r\n * як це робити \"правильно\" використовуючи GraphQL і gatsby-плагіни\r\n */\r\nimport logoSrc from \"../images/logo.png\";\r\n\r\nexport default () =&gt; (\r\n  &lt;header&gt;\r\n    &lt;Link to=\"/\"&gt;\r\n      &lt;img src={logoSrc} alt=\"logo\" width=\"60px\" height=\"60px\" /&gt;\r\n    &lt;/Link&gt;\r\n    That is header\r\n  &lt;/header&gt;\r\n);</pre>\n\n<p><em>/src/components/sidebar.js</em></p>\n\n<pre>import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\n\r\nexport default () =&gt; (\r\n  &lt;div&gt;\r\n    &lt;ul&gt;\r\n      &lt;li&gt;\r\n        &lt;Link to=\"/about\"&gt;about&lt;/Link&gt;\r\n      &lt;/li&gt;\r\n      &lt;li&gt;\r\n        &lt;Link to=\"/tutorial/part-zero\"&gt;Part #0&lt;/Link&gt;\r\n      &lt;/li&gt;\r\n      &lt;li&gt;\r\n        &lt;Link to=\"/tutorial/part-one\"&gt;Part #1&lt;/Link&gt;\r\n      &lt;/li&gt;\r\n      &lt;li&gt;\r\n        &lt;Link to=\"/tutorial/part-two\"&gt;Part #2&lt;/Link&gt;\r\n      &lt;/li&gt;\r\n      &lt;li&gt;\r\n        &lt;Link to=\"/tutorial/part-three\"&gt;Part #3&lt;/Link&gt;\r\n      &lt;/li&gt;\r\n      &lt;li&gt;\r\n        &lt;Link to=\"/tutorial/part-four\"&gt;Part #4&lt;/Link&gt;\r\n      &lt;/li&gt;\r\n    &lt;/ul&gt;\r\n  &lt;/div&gt;\r\n);</pre>\n\n<p>і додамо їх в <em>/src/pages/index.js</em></p>\n\n<pre>import React from \"react\";\r\n\r\nimport Header from \"../components/header\";\r\nimport Sidebar from \"../components/sidebar\";\r\n\r\nexport default () =&gt; (\r\n  &lt;div&gt;\r\n    &lt;Header /&gt;\r\n    &lt;Sidebar /&gt;\r\n    &lt;h1&gt;Index page&lt;/h1&gt;\r\n  &lt;/div&gt;\r\n);</pre>\n\n<p>Перевіряємо: </p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image5_s27vwxv.jpg\"></p>\n\n<p>Все працює, але нам потрібно імпортувати Header і Sidebar на кожну сторінку окремо, що не дуже то й зручно. Щоб вирішити це питання, досить створити layout-компонент та огорнути ним кожну сторінку.</p>\n\n<p><span style=\"margin-left: 30px; display: inline-block;\"><em>Gatsby layout == React container<br>так-так, саме неточна рівність, тому що це «майже» одне і те саме_</em></span></p>\n\n<p><em>/src/components/layout.js</em></p>\n\n<pre>import React from \"react\";\r\n\r\nimport Header from \"./header\";\r\nimport Sidebar from \"./sidebar\";\r\n\r\nexport default ({ children }) =&gt; (\r\n  &lt;&gt;\r\n    &lt;Header /&gt;\r\n    &lt;div\r\n      style={{ margin: `0 auto`, maxWidth: 650, backgroundColor: `#eeeeee` }}\r\n    &gt;\r\n      &lt;Sidebar /&gt;\r\n      {children}\r\n    &lt;/div&gt;\r\n  &lt;/&gt;\r\n);</pre>\n\n<p><em>/src/pages/index.js</em> (і всі інші сторінки)</p>\n\n<pre>import React from \"react\";\r\n\r\nimport Layout from \"../components/layout\";\r\n\r\nexport default () =&gt; (\r\n  &lt;Layout&gt;\r\n    &lt;h1&gt;Index page&lt;/h1&gt;\r\n  &lt;/Layout&gt;\r\n);</pre>\n\n<p>Готово, дивимося в браузер:</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image4.gif\"></p>\n\n<p><span style=\"margin-left: 30px; display: inline-block;\"><em>Чому в проекті всі назви файлів з маленької літери? Для початку визначимося, що naming convention для <strong>React</strong> виходить з того, що «кожен файл — це клас, а клас завжди називається з великої літери». В <strong>Gatsby</strong> файли, як і раніше, містять класи, але є одне «але»: «кожен файл є потенційною сторінкою, а його назва ― URL до цієї сторінки». Ком’юніті прийшло до висновку про те, що посилання виду <code>http://domain.com/User/Settings</code> ― це не <em>comme-il-fautі</em>, і затвердило kebab-case для назв файлів.</em></span></p>\n\n<p><details><summary>Структура файлів</summary><pre>src\r\n├── components\r\n│   ├── header.js\r\n│   ├── layout.js\r\n│   └── sidebar.js\r\n├── images\r\n│   └── logo.png\r\n└── pages\r\n    ├── about.js\r\n    ├── index.js\r\n    └── tutorial\r\n        ├── part-eight.js\r\n        ├── part-five.js\r\n        ├── part-four.js\r\n        ├── part-one.js\r\n        ├── part-seven.js\r\n        ├── part-six.js\r\n        ├── part-three.js\r\n        ├── part-two.js\r\n        └── part-zero.js</pre></details></p>\n\n<h2 id=\"three\">Робота з даними</h2>\n\n<p>Тепер, коли структура сайту готова, можна переходити до наповнення контентом. Класичний «хардкод» підхід не влаштовував творців JAM-стеку, так само, як і «рендерити контент з AJAX-запитів». Тому вони запропонували заповнювати сайти контентом під час компіляції. У випадку з <strong>Gatsby</strong> за це відповідає <strong>GraphQL</strong>, який дозволяє зручно працювати з потоками даних з будь-яких джерел.</p>\n\n<p><span style=\"margin-left: 30px; display: inline-block;\"><em>Розповісти про GraphQL в двох словах неможливо, тому бажано вивчити його самостійно або почекати моєї наступної статті. Детальніше про роботу з GraphQL можна почитати <a href=\"https://www.howtographql.com/\" target=\"_blank\">тут</a>.</em></span></p>\n\n<p>Для роботи з <strong>GraphQL</strong>, з другої версії, в пакеті <code>gatsby</code> є компонент <a href=\"https://www.gatsbyjs.org/docs/static-query/\" target=\"_blank\">StaticQuery</a>, який може використовуватися як на сторінках, так і в простих компонентах, і в цьому його головна відмінність від його попередника ― <a href=\"https://www.gatsbyjs.org/docs/page-query/\" target=\"_blank\">page query</a>. Поки що наш сайт не з’єднаний з якимись джерелами даних, тому спробуємо вивести метадані сторінок, для прикладу, а потім перейдемо до більш складних речей.</p>\n\n<p>Щоб побудувати <code>query</code>, потрібно відкрити <a href=\"http://localhost:8000/___graphql\" target=\"_blank\">localhost:8000/___graphql</a> і, користуючись бічною панеллю з документацією, знайти доступні дані про сайт. І не забудьте про автодоповнення.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image2_3Q37U4F.gif\"></p>\n\n<p><em>/src/components/sidebar.js</em></p>\n\n<pre>import React from \"react\";\r\nimport { Link, StaticQuery, graphql } from \"gatsby\";\r\n\r\nexport default () =&gt; (\r\n  &lt;StaticQuery\r\n    query={graphql`\r\n      {\r\n        allSitePage {\r\n          edges {\r\n            node {\r\n              id\r\n              path\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={({ allSitePage: { edges } }) =&gt; (\r\n      &lt;ul&gt;\r\n        {edges.map(({ node: { id, path } }) =&gt; (\r\n          &lt;li key={id}&gt;\r\n            &lt;Link to={path}&gt;{id}&lt;/Link&gt;\r\n          &lt;/li&gt;\r\n        ))}\r\n      &lt;/ul&gt;\r\n    )}\r\n  /&gt;\r\n);</pre>\n\n<p>Тепер ми, використовуючи <code>query</code>, отримуємо дані про сторінки, які рендеримо в панелі навігації. Більше не потрібно переживати з приводу того, що посилання не буде відповідати назві, тому що всі дані збираються автоматично.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/1_fEwwXWr.jpg\"></p>\n\n<p>По факту це всі дані, які можуть бути на нашому сайті без використання сторонніх плагінів і без старого доброго «хардкоду», тому ми плавно переходимо в наступну тему нашої статті ― плагіни.</p>\n\n<h2 id=\"four\">Плагіни</h2>\n\n<p>За своєю суттю Gatsby — це компілятор з купою фішок, якими якраз і є плагіни. За допомогою них можна налаштовувати обробку тих чи інших файлів, типів даних і різних форматів.</p>\n\n<p>Створимо на кореневому рівні додатку файл <em>/gatsby-config.js&lt;|em&gt;, який відповідає за конфігурацію компілятора в цілому, і спробуємо налаштувати перший плагін для роботи з файлами.</em></p>\n\n<p>Встановлення плагіну:</p>\n\n<pre>yarn add gatsby-source-filesystem</pre>\n\n<p>Конфігурація у файлі <em>/gatsby-config.js</em>:</p>\n\n<pre>module.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `images`,\r\n        path: `${__dirname}/src/images/`,\r\n      }\r\n    }\r\n  ],\r\n}</pre>\n\n<p><details><summary>Детальніше про файл вище</summary><pre>/**\r\n * gatsby-config.js це файл, який повинен\r\n * за замовчуванням експортувати об'єкт JS\r\n * з конфігурацією для компілятора\r\n */\r\nmodule.exports = {\r\n  /**\r\n   * поле 'plugins' описує pipeline процесу компіляції\r\n   * та складається з набору плагінів\r\n   */\r\n  plugins: [\r\n    /**\r\n     * кожен плагін може бути вказаний у вигляді рядка\r\n     * або у вигляді об'єкта для налаштування його опцій\r\n     */\r\n    `gatsby-example-plugin`,\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `images`,\r\n        path: `${__dirname}/src/images/`,\r\n      }\r\n    }\r\n  ],\r\n}</pre></details></p>\n\n<p>Пам’ятайте ми говорили про «правильний» імпорт картинок в <strong>Gatsby</strong>?</p>\n\n<p><em>/src/components/header.js</em></p>\n\n<pre>import React from \"react\";\r\nimport { Link, StaticQuery, graphql } from \"gatsby\";\r\n\r\nexport default () =&gt; (\r\n  &lt;StaticQuery\r\n    query={graphql`\r\n      {\r\n        allFile(filter: { name: { eq: \"logo\" } }) {\r\n          edges {\r\n            node {\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={({\r\n      allFile: {\r\n        edges: [\r\n          {\r\n            node: { publicURL }\r\n          }\r\n        ]\r\n      }\r\n    }) =&gt; (\r\n      &lt;header&gt;\r\n        &lt;Link to=\"/\"&gt;\r\n          &lt;img src={publicURL} alt=\"logo\" width=\"60px\" height=\"60px\" /&gt;\r\n        &lt;/Link&gt;\r\n        That is header\r\n      &lt;/header&gt;\r\n    )}\r\n  /&gt;\r\n);</pre>\n\n<p>На сайті нічого не змінилося, але тепер картинка підставляється за допомогою GraphQL, замість простого webpack-імпорту. З першого погляду може здатися, що конструкції занадто складні і це лише додає проблем, але давайте не поспішати з висновками, бо справа в тих же самих плагінах. Наприклад, якби ми вирішили розміщувати на сайті тисячі фотографій, то нам в будь-якому випадку довелося б думати про оптимізацію завантаження всього контенту. Щоб не будувати свій <a href=\"https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/\" target=\"_blank\">lazy-load процесс</a> з нуля, ми б просто додали <a href=\"https://www.gatsbyjs.org/packages/gatsby-image/\" target=\"_blank\">gatsby-image</a> плагін, який би оптимізував завантаження всіх картинок, що імпортуються за допомогою <code>query</code>.</p>\n\n<p>Встановлення плагінів для стилізації:</p>\n\n<pre>yarn add gatsby-plugin-typography react-typography typography typography-theme-noriega node-sass gatsby-plugin-sass gatsby-plugin-styled-components styled-components babel-plugin-styled-components</pre>\n\n<p><em>gatsby-config.js</em></p>\n\n<pre>module.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `images`,\r\n        path: `${__dirname}/src/images/`\r\n      }\r\n    },\r\n    // add style plugins below\r\n    `gatsby-plugin-typography`,\r\n    `gatsby-plugin-sass`,\r\n    `gatsby-plugin-styled-components`\r\n  ]\r\n};</pre>\n\n<p><span style=\"margin-left: 30px; display: inline-block;\"><em><a href=\"https://www.gatsbyjs.org/plugins/\" target=\"_blank\">На офіційному сайті</a> можна знайти плагін на будь-який смак.</em></span></p>\n\n<h2 id=\"five\">Стилізація сайту</h2>\n\n<p>Почнемо стилізацію додатку, використовуючи різні підходи. У попередньому кроці ми вже встановили плагіни для роботи з <a href=\"https://sass-lang.com/\" target=\"_blank\">SASS</a>, <a href=\"https://www.styled-components.com/\" target=\"_blank\">styled-components</a> та бібліотекою <a href=\"https://kyleamathews.github.io/typography.js/\" target=\"_blank\">typography.js</a>. При цьому важливо відзначити, що css.modules підтримуються «з коробки».</p>\n\n<p>Почнемо роботу з глобальних стилів, які, як і інші речі, що відносяться до всього сайту, повинні бути налаштовані в файлі <em>/gatsby-browser.js</em>:</p>\n\n<pre>import \"./src/styles/global.scss\";</pre>\n\n<p><span style=\"margin-left: 30px; display: inline-block;\"><em>Детальніше про <a href=\"https://www.gatsbyjs.org/docs/browser-apis/\" target=\"_blank\">gatsby-browser.js</a>.</em></span></p>\n\n<p><em>/src/styles/global.scss</em></p>\n\n<pre>body {\r\n  background-color: lavenderblush;\r\n}</pre>\n\n<p>З різних причин тенденції останніх років схиляються в бік «CSS in JS» підходу, тому не варто зловживати глобальними стилями і краще обмежитися зазначенням шрифту і глобальних класів. У цьому конкретному проекті планується використання <strong>Typography.js</strong> для цих цілей, тому глобальні стилі залишаться порожніми.</p>\n\n<p>Ви вже могли помітити зміни зовнішнього вигляду сайту після додавання <code>gatsby-plugin-typography</code> в конфігурацію. Це тому, що був застосований його пресет за замовчуванням, а зараз ми сконфігуруємо його під себе.</p>\n\n<p><em>/src/utils/typography.js</em></p>\n\n<pre>import Typography from \"typography\";\r\nimport theme from \"typography-theme-noriega\";\r\n\r\nconst typography = new Typography(theme);\r\n\r\nexport default typography;</pre>\n\n<p><span style=\"margin-left: 30px; display: inline-block;\"><em>Можна вибрати будь-який інший пресет зі <a href=\"https://github.com/KyleAMathews/typography.js#published-typographyjs-themes\" target=\"_blank\">списку</a> або створити свій власний, використовуючи API пакету (<a href=\"https://github.com/gatsbyjs/gatsby/blob/master/www/src/utils/typography.js\" target=\"_blank\">приклад</a> конфігурації офіційного сайту Gatsby).</em></span></p>\n\n<p><em>/gatsby-config.js</em></p>\n\n<pre>module.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `images`,\r\n        path: `${__dirname}/src/images/`\r\n      }\r\n    },\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`\r\n      }\r\n    },\r\n    `gatsby-plugin-sass`,\r\n    `gatsby-plugin-styled-components`\r\n  ]\r\n};</pre>\n\n<p>І в залежності від обраного пресету глобальний стиль сайту буде змінений. Яким підходом налаштовувати глобальні стилі, вирішуйте самі, бо відмінностей з технічної точки зору немає і тому це питання смаку. А ми переходимо до стилізації компонентів, використовуючи <strong>styled-components</strong>.</p>\n\n<p>Додамо файл з глобальними змінними <em>/src/utils/vars.js</em></p>\n\n<pre>export const colors = {\r\n  main: `#663399`,\r\n  second: `#fbfafc`,\r\n  main50: `rgba(102, 51, 153, 0.5)`,\r\n  second50: `rgba(251, 250, 252, 0.5)`,\r\n  textMain: `#000000`,\r\n  textSecond: `#ffffff`,\r\n  textBody: `#222222`\r\n};</pre>\n\n<p><details><summary>/src/components/header.js</summary><pre>import React from \"react\";\r\nimport { Link, StaticQuery, graphql } from \"gatsby\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { colors } from \"../utils/vars\";\r\n\r\nconst Header = styled.header`\r\n  width: 100%;\r\n  height: 3em;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background-color: ${colors.main};\r\n  color: ${colors.textSecond};\r\n  padding: 0.5em;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  border-radius: 50%;\r\n  height: 100%;\r\n`;\r\nconst logoLink = `height: 100%;`;\r\n\r\nexport default () =&gt; (\r\n  &lt;StaticQuery\r\n    query={graphql`\r\n      {\r\n        allFile(filter: { name: { eq: \"logo\" } }) {\r\n          edges {\r\n            node {\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={({\r\n      allFile: {\r\n        edges: [\r\n          {\r\n            node: { publicURL }\r\n          }\r\n        ]\r\n      }\r\n    }) =&gt; (\r\n      &lt;Header&gt;\r\n        That is header\r\n        &lt;Link to=\"/\" css={logoLink}&gt;\r\n          &lt;Logo src={publicURL} alt=\"logo\" /&gt;\r\n        &lt;/Link&gt;\r\n      &lt;/Header&gt;\r\n    )}\r\n  /&gt;\r\n);</pre></details></p>\n\n<p><details><summary>/src/components/sidebar.js</summary><pre>import React from \"react\"\r\nimport { Link, StaticQuery, graphql } from \"gatsby\"\r\nimport styled from \"styled-components\"\r\n\r\nimport { colors } from \"../utils/vars\"\r\n\r\nconst Sidebar = styled.section`\r\n  position: fixed;\r\n  left: 0;\r\n  width: 20%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  background-color: ${colors.second};\r\n  color: ${colors.textMain};\r\n`\r\n\r\nconst navItem = `\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 1em 0 2em;\r\n  padding: 0.5em 0;\r\n  border-bottom: 0.05em solid ${colors.mainHalf};\r\n  postion: relative;\r\n  color: ${colors.textBody};\r\n  text-decoration: none;\r\n\r\n  &amp;:before {\r\n    content: '';\r\n    transition: 0.5s;\r\n    width: 0.5em;\r\n    height: 0.5em;\r\n    position: absolute;\r\n    left: 0.8em;\r\n    border-radius: 50%;\r\n    display: block;\r\n    background-color: ${colors.main};\r\n    transform: scale(0);\r\n  }\r\n\r\n  &amp;:last-child {\r\n    border-bottom: none;\r\n  }\r\n\r\n  &amp;:hover {\r\n    &amp;:before {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n`\r\n\r\nexport default () =&gt; (\r\n  &lt;StaticQuery\r\n    query={graphql`\r\n      {\r\n        allSitePage {\r\n          edges {\r\n            node {\r\n              id,\r\n              path\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={({\r\n      allSitePage: {\r\n        edges\r\n      }\r\n    }) =&gt; (\r\n      &lt;Sidebar&gt;\r\n        {\r\n          edges.map(({\r\n            node: {\r\n              id,\r\n              path\r\n            }\r\n          }) =&gt; (\r\n            &lt;Link to={path} key={id} css={navItem} &gt;{id}&lt;/Link&gt;\r\n          ))\r\n        }\r\n      &lt;/Sidebar&gt;\r\n    )}\r\n  /&gt;\r\n\r\n)</pre></details></p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image3_8yYiOgZ.gif\"></p>\n\n<p>Вже існуючі елементи стилізовані, і настав час зв’язати контент з <a href=\"https://www.contentful.com/\" target=\"_blank\">Contentful</a>, підключити Markdown-плагін і згенерувати сторінки, використовуючи <strong>createPages API</strong>.</p>\n\n<p><span style=\"margin-left: 30px; display: inline-block;\"><em>Детальніше про те, як зв’язати Gatsby і Contentful, читайте в <a href=\"https://dou.ua/lenta/articles/creating-blog-with-jamstack/\" target=\"_blank\">попередній статті</a>.</em></span></p>\n\n<p><details><summary>Структура моїх даних з Contentful</summary><pre>[\r\n  {\r\n    \"id\": \"title\",\r\n    \"type\": \"Symbol\"\r\n  },\r\n  {\r\n    \"id\": \"content\",\r\n    \"type\": \"Text\",\r\n  },\r\n  {\r\n    \"id\": \"link\",\r\n    \"type\": \"Symbol\",\r\n  },\r\n  {\r\n    \"id\": \"orderNumber\",\r\n    \"type\": \"Integer\",\r\n  }\r\n]</pre></details></p>\n\n<p>Встановлення пакетів:</p>\n\n<pre>yarn add dotenv gatsby-source-contentful gatsby-transformer-remark</pre>\n\n<p><em>/gatsby-config.js</em></p>\n\n<pre>if (process.env.NODE_ENV === \"development\") {\r\n  require(\"dotenv\").config();\r\n}\r\n\r\nmodule.exports = {\r\n  plugins: [\r\n    `gatsby-transformer-remark`,\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `images`,\r\n        path: `${__dirname}/src/images/`,\r\n      }\r\n    },\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n    {\r\n      resolve: `gatsby-source-contentful`,\r\n      options: {\r\n        spaceId: process.env.CONTENTFUL_SPACE_ID,\r\n        accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\r\n      },\r\n    },\r\n    `gatsby-plugin-sass`,\r\n    `gatsby-plugin-styled-components`,\r\n  ],\r\n}</pre>\n\n<p>Видаляємо папку <em>/src/pages</em> з усіма файлами всередині і створюємо новий файл для керування вузлами в Gatsby:</p>\n\n<p><em>/gatsby-node.js</em></p>\n\n<pre>const path = require(`path`);\r\n\r\n/**\r\n * Експортована функція, яка перезапише існуючу за замовчуванням,\r\n * та буде викликана для генерації сторінок\r\n */\r\nexports.createPages = ({ graphql, actions }) =&gt; {\r\n  /**\r\n   * Отримуємо метод для створення сторінки з екшенів,\r\n   * щоб уникнути зайвих імпортів і зберігати контекст\r\n   * сторінки і функції\r\n   */\r\n  const { createPage } = actions;\r\n  return graphql(`\r\n    {\r\n      allContentfulArticle {\r\n        edges {\r\n          node {\r\n            title\r\n            link\r\n            content {\r\n              childMarkdownRemark {\r\n                html\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `).then(({ data: { allContentfulArticle: { edges } } }) =&gt; {\r\n    /**\r\n     * Для кожного елемента з відповіді\r\n     * викликаємо createPage () функцію і передаємо\r\n     * всередину дані за допомогою контексту\r\n     */\r\n    edges.forEach(({ node }) =&gt; {\r\n      createPage({\r\n        path: node.link,\r\n        component: path.resolve(`./src/templates/index.js`),\r\n        context: {\r\n          slug: node.link\r\n        }\r\n      });\r\n    });\r\n  });\r\n};</pre>\n\n<p><span style=\"margin-left: 30px; display: inline-block;\"><em>Детальніше про <a href=\"https://www.gatsbyjs.org/docs/node-apis/\" target=\"_blank\">gatsby-node.js</a>.</em></span></p>\n\n<p>Створюємо template-файл, який буде основою для сторінок, які генеруються<em>/src/templates/index.js</em></p>\n\n<pre>import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../components/layout\";\r\n\r\nexport default ({\r\n  data: {\r\n    allContentfulArticle: {\r\n      edges: [\r\n        {\r\n          node: {\r\n            content: {\r\n              childMarkdownRemark: { html }\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}) =&gt; {\r\n  return (\r\n    &lt;Layout&gt;\r\n      &lt;div dangerouslySetInnerHTML={{ __html: html }} /&gt;\r\n    &lt;/Layout&gt;\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    allContentfulArticle(filter: { link: { eq: $slug } }) {\r\n      edges {\r\n        node {\r\n          title\r\n          link\r\n          content {\r\n            childMarkdownRemark {\r\n              html\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;</pre>\n\n<p><span style=\"margin-left: 30px; display: inline-block;\"><em>Чому тут не використовується <code>&lt;StaticQuery /&gt;</code> компонент? Вся справа в тому, що він не підтримує змінні для побудови запиту, а нам потрібно використовувати змінну <code>$slug</code> з контексту сторінки.</em></span></p>\n\n<p><details><summary>Оновлюємо логіку в навігаційній панелі</summary><pre>import React from \"react\";\r\nimport { Link, StaticQuery, graphql } from \"gatsby\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { colors } from \"../utils/vars\";\r\n\r\nconst Sidebar = styled.section`\r\n  position: fixed;\r\n  left: 0;\r\n  width: 20%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  background-color: ${colors.second};\r\n  color: ${colors.textMain};\r\n`;\r\n\r\nconst navItem = `\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 1em 0 2em;\r\n  padding: 0.5em 0;\r\n  border-bottom: 0.05em solid ${colors.main50};\r\n  postion: relative;\r\n  color: ${colors.textBody};\r\n  text-decoration: none;\r\n\r\n  &amp;:before {\r\n    content: '';\r\n    transition: 0.5s;\r\n    width: 0.5em;\r\n    height: 0.5em;\r\n    position: absolute;\r\n    left: 0.8em;\r\n    border-radius: 50%;\r\n    display: block;\r\n    background-color: ${colors.main};\r\n    transform: scale(0);\r\n  }\r\n\r\n  &amp;:last-child {\r\n    border-bottom: none;\r\n  }\r\n\r\n  &amp;:hover {\r\n    &amp;:before {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n`;\r\n\r\nexport default () =&gt; (\r\n  &lt;StaticQuery\r\n    query={graphql`\r\n      {\r\n        allContentfulArticle(sort: { order: ASC, fields: orderNumber }) {\r\n          edges {\r\n            node {\r\n              title\r\n              link\r\n              orderNumber\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={({ allContentfulArticle: { edges } }) =&gt; (\r\n      &lt;Sidebar&gt;\r\n        {edges.map(({ node: { title, link, orderNumber } }) =&gt; (\r\n          &lt;Link to={link} key={link} css={navItem}&gt;\r\n            {orderNumber}. {title}\r\n          &lt;/Link&gt;\r\n        ))}\r\n      &lt;/Sidebar&gt;\r\n    )}\r\n  /&gt;\r\n);</pre></details></p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image7_BnTxonQ.gif\"></p>\n\n<h2 id=\"six\">SEO-оптимізація з використанням react-helmet</h2>\n\n<p>З технічної точки зору сайт можна вважати готовим, тому давайте попрацюємо з його мета-даними. Для цього нам знадобляться такі плагіни:</p>\n\n<pre>yarn add gatsby-plugin-react-helmet react-helmet</pre>\n\n<p><span style=\"margin-left: 30px; display: inline-block;\"><em><a href=\"https://github.com/nfl/react-helmet\" target=\"_blank\">react-helmet</a> генерує <code>&lt;head&gt; ... &lt;/ head&gt;</code> для HTML сторінок і в зв’язці з Gatsby рендерингом є потужним і зручним інструментом для роботи з SEO.</em></span></p>\n\n<p><em>/src/templates/index.js</em></p>\n\n<pre>import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport Layout from \"../components/layout\";\r\n\r\nexport default ({\r\n  data: {\r\n    allContentfulArticle: {\r\n      edges: [\r\n        {\r\n          node: {\r\n            title,\r\n            content: {\r\n              childMarkdownRemark: { html }\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}) =&gt; {\r\n  return (\r\n    &lt;Layout&gt;\r\n      &lt;Helmet&gt;\r\n        &lt;meta charSet=\"utf-8\" /&gt;\r\n        &lt;title&gt;{title}&lt;/title&gt;\r\n      &lt;/Helmet&gt;\r\n      &lt;div dangerouslySetInnerHTML={{ __html: html }} /&gt;\r\n    &lt;/Layout&gt;\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    allContentfulArticle(filter: { link: { eq: $slug } }) {\r\n      edges {\r\n        node {\r\n          title\r\n          link\r\n          content {\r\n            childMarkdownRemark {\r\n              html\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;</pre>\n\n<p>Тепер <code>title</code> сайту буде завжди збігатися з назвою статті, що буде істотно впливати на видачу сайту в результатах пошуку, конкретно з цього питання. Сюди ж можна легко додати <code>&lt;meta name=\"description\" content=\"Опис статті\"&gt;</code> з описом кожної статті окремо, надаючи цим можливість користувачеві, ще на сторінці пошуку, зрозуміти, про що йде мова в статті. І взагалі всі можливості SEO тепер доступні, і ними можна керувати з одного місця.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/aVsG.png\"></p>\n\n<h2 id=\"seven\">Налаштування PWA</h2>\n\n<p>Gatsby розроблений, щоб забезпечити першокласну продуктивність «з коробки». Він бере на себе питання щодо розділення і мінімізації коду, а також оптимізації у вигляді попереднього завантаження у фоновому режимі, обробки зображень і ін. Отже, створюваний вами сайт має високу продуктивність без будь-яких додаткових налаштувань. Ці функції продуктивності є важливою частиною підтримки прогресивного підходу до веб-додатків.</p>\n\n<p>Але крім усього, перерахованого вище, існують три базові критерії для сайту, які визначають його як <a href=\"https://developers.google.com/web/progressive-web-apps/\" target=\"_blank\">PWA</a>:</p>\n\n<ul><li>https-протокол;</li><li>наявність <a href=\"https://www.w3.org/TR/appmanifest/\" target=\"_blank\">manifest.json;</a></li><li>офлайн-доступ до сайту за рахунок <a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\" target=\"_blank\">service workers.</a></li></ul>\n\n<p>Перший пункт не може бути вирішений силами Gatsby, оскільки <em>домен</em>, <em>хостинг</em> і <em>протокол —</em> це питання деплойменту, і ніяк не розробки. Але можу порадити <a href=\"https://www.netlify.com/\" target=\"_blank\">Netlify</a>, який легко вирішує проблему з https.</p>\n\n<p>Переходимо до інших пунктів. Для цього встановимо два плагіни:</p>\n\n<pre>yarn add gatsby-plugin-manifest gatsby-plugin-offline</pre>\n\n<p>і налаштуємо їх <em>/src/gatsby-config.js</em></p>\n\n<pre>if (process.env.NODE_ENV === \"development\") {\r\n  require(\"dotenv\").config();\r\n}\r\n\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-manifest`,\r\n      options: {\r\n        name: `GatsbyJS translated tutorial`,\r\n        short_name: `GatsbyJS tutorial`,\r\n        start_url: `/`,\r\n        background_color: `#f7f0eb`,\r\n        theme_color: `#a2466c`,\r\n        display: `standalone`,\r\n        icon: `public/favicon.ico`,\r\n        include_favicon: true\r\n      }\r\n    },\r\n    `gatsby-plugin-offline`,\r\n    `gatsby-transformer-remark`,\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `images`,\r\n        path: `${__dirname}/src/images/`\r\n      }\r\n    },\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`\r\n      }\r\n    },\r\n    {\r\n      resolve: `gatsby-source-contentful`,\r\n      options: {\r\n        spaceId: process.env.CONTENTFUL_SPACE_ID,\r\n        accessToken: process.env.CONTENTFUL_ACCESS_TOKEN\r\n      }\r\n    },\r\n    `gatsby-plugin-sass`,\r\n    `gatsby-plugin-styled-components`,\r\n    `gatsby-plugin-react-helmet`\r\n  ]\r\n};</pre>\n\n<p>Ви можете налаштувати свій маніфест, використовуючи <a href=\"https://www.w3.org/TR/appmanifest/\" target=\"_blank\">документацію</a>, а також кастомізувати стратегію service-workers, <a href=\"https://www.npmjs.com/package/gatsby-plugin-offline#overriding-options\" target=\"_blank\">перезаписавши налаштування плагіну</a>.</p>\n\n<p>Ніяких змін в режимі розробки ви не помітите, але сайт вже відповідає останнім вимогам світу web. І коли він буде розміщений на https:// домені, йому не буде рівних.</p>\n\n<h2>Висновок</h2>\n\n<p>Кілька років тому, коли я вперше зіткнувся з проблемами виведення в інтернет React-додатку, його підтримки і оновлення контенту, я і не міг уявити, що на ринку вже існував JAM-stack підхід, який спрощує всі ці процеси. І зараз я не перестаю дивуватися його простоті. Gatsby вирішує більшість питань, які впливають на продуктивність сайту просто «з коробки». А якщо ще трохи розібравшись в тонкощах, налаштувати його під свої потреби, то можна отримати 100% показники за всіма пунктами в <a href=\"https://developers.google.com/web/tools/lighthouse/\" target=\"_blank\">Lighthouse</a>, чим суттєво вплинути на видачу сайту в пошукових системах (принаймні в Google).</p>\n\n<p><a href=\"https://github.com/alexandrtovmach/gatsby-tutorial\" target=\"_blank\">Репозиторій з проектом</a></p>\n\n<h4>Наостанок</h4>\n\n<p>Як ви могли помітити, розглянутий в статті проект копіює основний сайт з документацією Gatsby.js. Це неспроста, тому що я замахнувся перекласти хоча би вступний туторіал російською та українською мовами, щоб популяризувати цей стек в Україні та СНД. Подивитися на поточну версію <a href=\"https://gatsbyjs-tutorial.alexandrtovmach.com/\" target=\"_blank\">можна тут</a>.</p>\n\n<p><em>Читайте також мою <a href=\"https://dou.ua/lenta/articles/creating-blog-with-jamstack/\" target=\"_blank\">попередню статтю</a> про те, як створити і опублікувати особистий блог, використовуючи JAM-stack.</em></p>","contentSnippet":"Як відомо, на одних бойлерплейтах далеко не заїдеш, тому доводиться лізти вглиб будь-якої технології, щоб навчитися писати щось вартісне. У цій статті розглянемо деталі Gatsby.js, знання яких дозволить вам створювати і підтримувати складні веб-сайти і блоги.\nТеми, розглянуті нижче:\nСтруктура сторінок і роутинг\nКомпоненти, шаблони та їх взаємодія\nРобота з даними\nПлагіни\nСтилізація сайту\nSEO-оптимізація з використанням react-helmet\nНалаштування PWA\n\n\nПідготовка\nВстановлення Gatsby на ПК\nyarn global add gatsby-cli\nКлонування мінімального проекту\nnpx gatsby new gatsby-tutorial https://github.com/gatsbyjs/gatsby-starter-hello-world\r\ncd gatsby-tutorial\nІніціалізація репозиторію\ngit init\r\ngit add .\r\ngit commit -m \"init commit\"\nПеревірка справності\nyarn start\nЯкщо в консолі немає помилок, а в браузері на http://localhost:8000 видніється «Hello world!» ― значить все працює справно. Можна спробувати змінити вміст файлу /src/pages/index.js, щоб перевірити hot-reload.\n\nСтруктура сторінок і роутинг\nЩоб створити сторінку в Gatsby, досить просто помістити новий файл в папку /src/pages, та його буде скомпільовано в окрему HTML-сторінку. Важливо зауважити, що URL до цієї сторінки буде відповідати фактичному шляху з назвою. Наприклад, додамо ще кілька сторінок:\nsrc\r\n└── pages\r\n    ├── about.js\r\n    ├── index.js\r\n    └── tutorial\r\n        ├── part-four.js\r\n        ├── part-one.js\r\n        ├── part-three.js\r\n        ├── part-two.js\r\n        └── part-zero.js\nКонтент поки не важливий, тому можна використовувати будь-який текст задля того, щоб розрізняти сторінки:\nimport React from \"react\";\r\n\r\nexport default () => <div>Welcome to tutorial/part-one</div>;\nПеревіряємо в браузері:\nlocalhost:8000/tutorial/part-one\nlocalhost:8000/about\n\n\nОсь таким чином можна, структуруючи файли, водночас вирішувати питання роутингу.\nТакож існує спеціальний createPage API, за допомогою якого можна більш гнучко керувати шляхами і назвами сторінок, але для роботи з ним нам знадобиться розуміння роботи даних в Gatsby, тому розглянемо його трохи далі в статті.\nЗв’яжемо створені сторінки за допомогою посилань ― для цього скористаємося компонентом <Link /> з пакета Gatsby, який створений спеціально для внутрішньої навігації. Для всіх зовнішніх посилань слід використовувати звичайний <a> тег.\n/src/pages/index.js\nimport React from \"react\";\r\nimport { Link } from \"gatsby\";\r\n\r\nexport default () => (\r\n  <div>\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/about\">about</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/tutorial/part-zero\">Part #0</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/tutorial/part-one\">Part #1</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/tutorial/part-two\">Part #2</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/tutorial/part-three\">Part #3</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/tutorial/part-four\">Part #4</Link>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\n<Link> під капотом має дуже хитрий механізм щодо оптимізації завантаження сторінок і тому використовується замість <a> для навігації по сайту. Детальніше можна почитати тут.\n\nСторінки створені, посилання додані. Схоже, що з навігацією закінчили.\nКомпоненти, шаблони та їх взаємодія\nЯк відомо, в будь-якому проекті завжди є елементи, що повторюються. Для веб-сайтів це хедер, футер, навігаційна панель. Також сторінки, незалежно від контенту, будуються за заданою структурою. Так як Gatsby — це компілятор для  React , тут використовується той самий компонентний підхід для вирішення цих проблем.\nСтворимо компоненти для хедера та навігаційної панелі:\n/src/components/header.js\nimport React from \"react\";\r\nimport { Link } from \"gatsby\";\r\n\r\n/**\r\n * Зверніть увагу на те, що зображення для логотипу\r\n * імпортується так само, як і в звичайному React-проекті.\r\n * Це тимчасове і не оптимальне рішення, тому що картинка\r\n * поставляється \"як є\". Трохи далі ми розглянемо\r\n * як це робити \"правильно\" використовуючи GraphQL і gatsby-плагіни\r\n */\r\nimport logoSrc from \"../images/logo.png\";\r\n\r\nexport default () => (\r\n  <header>\r\n    <Link to=\"/\">\r\n      <img src={logoSrc} alt=\"logo\" width=\"60px\" height=\"60px\" />\r\n    </Link>\r\n    That is header\r\n  </header>\r\n);\n/src/components/sidebar.js\nimport React from \"react\";\r\nimport { Link } from \"gatsby\";\r\n\r\nexport default () => (\r\n  <div>\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/about\">about</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/tutorial/part-zero\">Part #0</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/tutorial/part-one\">Part #1</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/tutorial/part-two\">Part #2</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/tutorial/part-three\">Part #3</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/tutorial/part-four\">Part #4</Link>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\nі додамо їх в /src/pages/index.js\nimport React from \"react\";\r\n\r\nimport Header from \"../components/header\";\r\nimport Sidebar from \"../components/sidebar\";\r\n\r\nexport default () => (\r\n  <div>\r\n    <Header />\r\n    <Sidebar />\r\n    <h1>Index page</h1>\r\n  </div>\r\n);\nПеревіряємо: \n\nВсе працює, але нам потрібно імпортувати Header і Sidebar на кожну сторінку окремо, що не дуже то й зручно. Щоб вирішити це питання, досить створити layout-компонент та огорнути ним кожну сторінку.\nGatsby layout == React container\nтак-так, саме неточна рівність, тому що це «майже» одне і те саме_\n/src/components/layout.js\nimport React from \"react\";\r\n\r\nimport Header from \"./header\";\r\nimport Sidebar from \"./sidebar\";\r\n\r\nexport default ({ children }) => (\r\n  <>\r\n    <Header />\r\n    <div\r\n      style={{ margin: `0 auto`, maxWidth: 650, backgroundColor: `#eeeeee` }}\r\n    >\r\n      <Sidebar />\r\n      {children}\r\n    </div>\r\n  </>\r\n);\n/src/pages/index.js (і всі інші сторінки)\nimport React from \"react\";\r\n\r\nimport Layout from \"../components/layout\";\r\n\r\nexport default () => (\r\n  <Layout>\r\n    <h1>Index page</h1>\r\n  </Layout>\r\n);\nГотово, дивимося в браузер:\n\nЧому в проекті всі назви файлів з маленької літери? Для початку визначимося, що naming convention для React виходить з того, що «кожен файл — це клас, а клас завжди називається з великої літери». В Gatsby файли, як і раніше, містять класи, але є одне «але»: «кожен файл є потенційною сторінкою, а його назва ― URL до цієї сторінки». Ком’юніті прийшло до висновку про те, що посилання виду http://domain.com/User/Settings ― це не comme-il-fautі, і затвердило kebab-case для назв файлів.\nСтруктура файлів\nsrc\r\n├── components\r\n│   ├── header.js\r\n│   ├── layout.js\r\n│   └── sidebar.js\r\n├── images\r\n│   └── logo.png\r\n└── pages\r\n    ├── about.js\r\n    ├── index.js\r\n    └── tutorial\r\n        ├── part-eight.js\r\n        ├── part-five.js\r\n        ├── part-four.js\r\n        ├── part-one.js\r\n        ├── part-seven.js\r\n        ├── part-six.js\r\n        ├── part-three.js\r\n        ├── part-two.js\r\n        └── part-zero.js\n\nРобота з даними\nТепер, коли структура сайту готова, можна переходити до наповнення контентом. Класичний «хардкод» підхід не влаштовував творців JAM-стеку, так само, як і «рендерити контент з AJAX-запитів». Тому вони запропонували заповнювати сайти контентом під час компіляції. У випадку з Gatsby за це відповідає GraphQL, який дозволяє зручно працювати з потоками даних з будь-яких джерел.\nРозповісти про GraphQL в двох словах неможливо, тому бажано вивчити його самостійно або почекати моєї наступної статті. Детальніше про роботу з GraphQL можна почитати тут.\nДля роботи з GraphQL, з другої версії, в пакеті gatsby є компонент StaticQuery, який може використовуватися як на сторінках, так і в простих компонентах, і в цьому його головна відмінність від його попередника ― page query. Поки що наш сайт не з’єднаний з якимись джерелами даних, тому спробуємо вивести метадані сторінок, для прикладу, а потім перейдемо до більш складних речей.\nЩоб побудувати query, потрібно відкрити localhost:8000/___graphql і, користуючись бічною панеллю з документацією, знайти доступні дані про сайт. І не забудьте про автодоповнення.\n\n/src/components/sidebar.js\nimport React from \"react\";\r\nimport { Link, StaticQuery, graphql } from \"gatsby\";\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      {\r\n        allSitePage {\r\n          edges {\r\n            node {\r\n              id\r\n              path\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={({ allSitePage: { edges } }) => (\r\n      <ul>\r\n        {edges.map(({ node: { id, path } }) => (\r\n          <li key={id}>\r\n            <Link to={path}>{id}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    )}\r\n  />\r\n);\nТепер ми, використовуючи query, отримуємо дані про сторінки, які рендеримо в панелі навігації. Більше не потрібно переживати з приводу того, що посилання не буде відповідати назві, тому що всі дані збираються автоматично.\n\nПо факту це всі дані, які можуть бути на нашому сайті без використання сторонніх плагінів і без старого доброго «хардкоду», тому ми плавно переходимо в наступну тему нашої статті ― плагіни.\nПлагіни\nЗа своєю суттю Gatsby — це компілятор з купою фішок, якими якраз і є плагіни. За допомогою них можна налаштовувати обробку тих чи інших файлів, типів даних і різних форматів.\nСтворимо на кореневому рівні додатку файл /gatsby-config.js<|em>, який відповідає за конфігурацію компілятора в цілому, і спробуємо налаштувати перший плагін для роботи з файлами.\nВстановлення плагіну:\nyarn add gatsby-source-filesystem\nКонфігурація у файлі /gatsby-config.js:\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `images`,\r\n        path: `${__dirname}/src/images/`,\r\n      }\r\n    }\r\n  ],\r\n}\nДетальніше про файл вище\n/**\r\n * gatsby-config.js це файл, який повинен\r\n * за замовчуванням експортувати об'єкт JS\r\n * з конфігурацією для компілятора\r\n */\r\nmodule.exports = {\r\n  /**\r\n   * поле 'plugins' описує pipeline процесу компіляції\r\n   * та складається з набору плагінів\r\n   */\r\n  plugins: [\r\n    /**\r\n     * кожен плагін може бути вказаний у вигляді рядка\r\n     * або у вигляді об'єкта для налаштування його опцій\r\n     */\r\n    `gatsby-example-plugin`,\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `images`,\r\n        path: `${__dirname}/src/images/`,\r\n      }\r\n    }\r\n  ],\r\n}\n\nПам’ятайте ми говорили про «правильний» імпорт картинок в Gatsby?\n/src/components/header.js\nimport React from \"react\";\r\nimport { Link, StaticQuery, graphql } from \"gatsby\";\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      {\r\n        allFile(filter: { name: { eq: \"logo\" } }) {\r\n          edges {\r\n            node {\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={({\r\n      allFile: {\r\n        edges: [\r\n          {\r\n            node: { publicURL }\r\n          }\r\n        ]\r\n      }\r\n    }) => (\r\n      <header>\r\n        <Link to=\"/\">\r\n          <img src={publicURL} alt=\"logo\" width=\"60px\" height=\"60px\" />\r\n        </Link>\r\n        That is header\r\n      </header>\r\n    )}\r\n  />\r\n);\nНа сайті нічого не змінилося, але тепер картинка підставляється за допомогою GraphQL, замість простого webpack-імпорту. З першого погляду може здатися, що конструкції занадто складні і це лише додає проблем, але давайте не поспішати з висновками, бо справа в тих же самих плагінах. Наприклад, якби ми вирішили розміщувати на сайті тисячі фотографій, то нам в будь-якому випадку довелося б думати про оптимізацію завантаження всього контенту. Щоб не будувати свій lazy-load процесс з нуля, ми б просто додали gatsby-image плагін, який би оптимізував завантаження всіх картинок, що імпортуються за допомогою query.\nВстановлення плагінів для стилізації:\nyarn add gatsby-plugin-typography react-typography typography typography-theme-noriega node-sass gatsby-plugin-sass gatsby-plugin-styled-components styled-components babel-plugin-styled-components\ngatsby-config.js\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `images`,\r\n        path: `${__dirname}/src/images/`\r\n      }\r\n    },\r\n    // add style plugins below\r\n    `gatsby-plugin-typography`,\r\n    `gatsby-plugin-sass`,\r\n    `gatsby-plugin-styled-components`\r\n  ]\r\n};\nНа офіційному сайті можна знайти плагін на будь-який смак.\nСтилізація сайту\nПочнемо стилізацію додатку, використовуючи різні підходи. У попередньому кроці ми вже встановили плагіни для роботи з SASS, styled-components та бібліотекою typography.js. При цьому важливо відзначити, що css.modules підтримуються «з коробки».\nПочнемо роботу з глобальних стилів, які, як і інші речі, що відносяться до всього сайту, повинні бути налаштовані в файлі /gatsby-browser.js:\nimport \"./src/styles/global.scss\";\nДетальніше про gatsby-browser.js.\n/src/styles/global.scss\nbody {\r\n  background-color: lavenderblush;\r\n}\nЗ різних причин тенденції останніх років схиляються в бік «CSS in JS» підходу, тому не варто зловживати глобальними стилями і краще обмежитися зазначенням шрифту і глобальних класів. У цьому конкретному проекті планується використання Typography.js для цих цілей, тому глобальні стилі залишаться порожніми.\nВи вже могли помітити зміни зовнішнього вигляду сайту після додавання gatsby-plugin-typography в конфігурацію. Це тому, що був застосований його пресет за замовчуванням, а зараз ми сконфігуруємо його під себе.\n/src/utils/typography.js\nimport Typography from \"typography\";\r\nimport theme from \"typography-theme-noriega\";\r\n\r\nconst typography = new Typography(theme);\r\n\r\nexport default typography;\nМожна вибрати будь-який інший пресет зі списку або створити свій власний, використовуючи API пакету (приклад конфігурації офіційного сайту Gatsby).\n/gatsby-config.js\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `images`,\r\n        path: `${__dirname}/src/images/`\r\n      }\r\n    },\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`\r\n      }\r\n    },\r\n    `gatsby-plugin-sass`,\r\n    `gatsby-plugin-styled-components`\r\n  ]\r\n};\nІ в залежності від обраного пресету глобальний стиль сайту буде змінений. Яким підходом налаштовувати глобальні стилі, вирішуйте самі, бо відмінностей з технічної точки зору немає і тому це питання смаку. А ми переходимо до стилізації компонентів, використовуючи styled-components.\nДодамо файл з глобальними змінними /src/utils/vars.js\nexport const colors = {\r\n  main: `#663399`,\r\n  second: `#fbfafc`,\r\n  main50: `rgba(102, 51, 153, 0.5)`,\r\n  second50: `rgba(251, 250, 252, 0.5)`,\r\n  textMain: `#000000`,\r\n  textSecond: `#ffffff`,\r\n  textBody: `#222222`\r\n};\n/src/components/header.js\nimport React from \"react\";\r\nimport { Link, StaticQuery, graphql } from \"gatsby\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { colors } from \"../utils/vars\";\r\n\r\nconst Header = styled.header`\r\n  width: 100%;\r\n  height: 3em;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background-color: ${colors.main};\r\n  color: ${colors.textSecond};\r\n  padding: 0.5em;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  border-radius: 50%;\r\n  height: 100%;\r\n`;\r\nconst logoLink = `height: 100%;`;\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      {\r\n        allFile(filter: { name: { eq: \"logo\" } }) {\r\n          edges {\r\n            node {\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={({\r\n      allFile: {\r\n        edges: [\r\n          {\r\n            node: { publicURL }\r\n          }\r\n        ]\r\n      }\r\n    }) => (\r\n      <Header>\r\n        That is header\r\n        <Link to=\"/\" css={logoLink}>\r\n          <Logo src={publicURL} alt=\"logo\" />\r\n        </Link>\r\n      </Header>\r\n    )}\r\n  />\r\n);\n\n/src/components/sidebar.js\nimport React from \"react\"\r\nimport { Link, StaticQuery, graphql } from \"gatsby\"\r\nimport styled from \"styled-components\"\r\n\r\nimport { colors } from \"../utils/vars\"\r\n\r\nconst Sidebar = styled.section`\r\n  position: fixed;\r\n  left: 0;\r\n  width: 20%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  background-color: ${colors.second};\r\n  color: ${colors.textMain};\r\n`\r\n\r\nconst navItem = `\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 1em 0 2em;\r\n  padding: 0.5em 0;\r\n  border-bottom: 0.05em solid ${colors.mainHalf};\r\n  postion: relative;\r\n  color: ${colors.textBody};\r\n  text-decoration: none;\r\n\r\n  &:before {\r\n    content: '';\r\n    transition: 0.5s;\r\n    width: 0.5em;\r\n    height: 0.5em;\r\n    position: absolute;\r\n    left: 0.8em;\r\n    border-radius: 50%;\r\n    display: block;\r\n    background-color: ${colors.main};\r\n    transform: scale(0);\r\n  }\r\n\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n\r\n  &:hover {\r\n    &:before {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n`\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      {\r\n        allSitePage {\r\n          edges {\r\n            node {\r\n              id,\r\n              path\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={({\r\n      allSitePage: {\r\n        edges\r\n      }\r\n    }) => (\r\n      <Sidebar>\r\n        {\r\n          edges.map(({\r\n            node: {\r\n              id,\r\n              path\r\n            }\r\n          }) => (\r\n            <Link to={path} key={id} css={navItem} >{id}</Link>\r\n          ))\r\n        }\r\n      </Sidebar>\r\n    )}\r\n  />\r\n\r\n)\n\n\nВже існуючі елементи стилізовані, і настав час зв’язати контент з Contentful, підключити Markdown-плагін і згенерувати сторінки, використовуючи createPages API.\nДетальніше про те, як зв’язати Gatsby і Contentful, читайте в попередній статті.\nСтруктура моїх даних з Contentful\n[\r\n  {\r\n    \"id\": \"title\",\r\n    \"type\": \"Symbol\"\r\n  },\r\n  {\r\n    \"id\": \"content\",\r\n    \"type\": \"Text\",\r\n  },\r\n  {\r\n    \"id\": \"link\",\r\n    \"type\": \"Symbol\",\r\n  },\r\n  {\r\n    \"id\": \"orderNumber\",\r\n    \"type\": \"Integer\",\r\n  }\r\n]\n\nВстановлення пакетів:\nyarn add dotenv gatsby-source-contentful gatsby-transformer-remark\n/gatsby-config.js\nif (process.env.NODE_ENV === \"development\") {\r\n  require(\"dotenv\").config();\r\n}\r\n\r\nmodule.exports = {\r\n  plugins: [\r\n    `gatsby-transformer-remark`,\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `images`,\r\n        path: `${__dirname}/src/images/`,\r\n      }\r\n    },\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`,\r\n      },\r\n    },\r\n    {\r\n      resolve: `gatsby-source-contentful`,\r\n      options: {\r\n        spaceId: process.env.CONTENTFUL_SPACE_ID,\r\n        accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\r\n      },\r\n    },\r\n    `gatsby-plugin-sass`,\r\n    `gatsby-plugin-styled-components`,\r\n  ],\r\n}\nВидаляємо папку /src/pages з усіма файлами всередині і створюємо новий файл для керування вузлами в Gatsby:\n/gatsby-node.js\nconst path = require(`path`);\r\n\r\n/**\r\n * Експортована функція, яка перезапише існуючу за замовчуванням,\r\n * та буде викликана для генерації сторінок\r\n */\r\nexports.createPages = ({ graphql, actions }) => {\r\n  /**\r\n   * Отримуємо метод для створення сторінки з екшенів,\r\n   * щоб уникнути зайвих імпортів і зберігати контекст\r\n   * сторінки і функції\r\n   */\r\n  const { createPage } = actions;\r\n  return graphql(`\r\n    {\r\n      allContentfulArticle {\r\n        edges {\r\n          node {\r\n            title\r\n            link\r\n            content {\r\n              childMarkdownRemark {\r\n                html\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `).then(({ data: { allContentfulArticle: { edges } } }) => {\r\n    /**\r\n     * Для кожного елемента з відповіді\r\n     * викликаємо createPage () функцію і передаємо\r\n     * всередину дані за допомогою контексту\r\n     */\r\n    edges.forEach(({ node }) => {\r\n      createPage({\r\n        path: node.link,\r\n        component: path.resolve(`./src/templates/index.js`),\r\n        context: {\r\n          slug: node.link\r\n        }\r\n      });\r\n    });\r\n  });\r\n};\nДетальніше про gatsby-node.js.\nСтворюємо template-файл, який буде основою для сторінок, які генеруються/src/templates/index.js\nimport React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../components/layout\";\r\n\r\nexport default ({\r\n  data: {\r\n    allContentfulArticle: {\r\n      edges: [\r\n        {\r\n          node: {\r\n            content: {\r\n              childMarkdownRemark: { html }\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}) => {\r\n  return (\r\n    <Layout>\r\n      <div dangerouslySetInnerHTML={{ __html: html }} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    allContentfulArticle(filter: { link: { eq: $slug } }) {\r\n      edges {\r\n        node {\r\n          title\r\n          link\r\n          content {\r\n            childMarkdownRemark {\r\n              html\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\nЧому тут не використовується <StaticQuery /> компонент? Вся справа в тому, що він не підтримує змінні для побудови запиту, а нам потрібно використовувати змінну $slug з контексту сторінки.\nОновлюємо логіку в навігаційній панелі\nimport React from \"react\";\r\nimport { Link, StaticQuery, graphql } from \"gatsby\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { colors } from \"../utils/vars\";\r\n\r\nconst Sidebar = styled.section`\r\n  position: fixed;\r\n  left: 0;\r\n  width: 20%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  background-color: ${colors.second};\r\n  color: ${colors.textMain};\r\n`;\r\n\r\nconst navItem = `\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 1em 0 2em;\r\n  padding: 0.5em 0;\r\n  border-bottom: 0.05em solid ${colors.main50};\r\n  postion: relative;\r\n  color: ${colors.textBody};\r\n  text-decoration: none;\r\n\r\n  &:before {\r\n    content: '';\r\n    transition: 0.5s;\r\n    width: 0.5em;\r\n    height: 0.5em;\r\n    position: absolute;\r\n    left: 0.8em;\r\n    border-radius: 50%;\r\n    display: block;\r\n    background-color: ${colors.main};\r\n    transform: scale(0);\r\n  }\r\n\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n\r\n  &:hover {\r\n    &:before {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n`;\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      {\r\n        allContentfulArticle(sort: { order: ASC, fields: orderNumber }) {\r\n          edges {\r\n            node {\r\n              title\r\n              link\r\n              orderNumber\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={({ allContentfulArticle: { edges } }) => (\r\n      <Sidebar>\r\n        {edges.map(({ node: { title, link, orderNumber } }) => (\r\n          <Link to={link} key={link} css={navItem}>\r\n            {orderNumber}. {title}\r\n          </Link>\r\n        ))}\r\n      </Sidebar>\r\n    )}\r\n  />\r\n);\n\n\nSEO-оптимізація з використанням react-helmet\nЗ технічної точки зору сайт можна вважати готовим, тому давайте попрацюємо з його мета-даними. Для цього нам знадобляться такі плагіни:\nyarn add gatsby-plugin-react-helmet react-helmet\nreact-helmet генерує <head> ... </ head> для HTML сторінок і в зв’язці з Gatsby рендерингом є потужним і зручним інструментом для роботи з SEO.\n/src/templates/index.js\nimport React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport Layout from \"../components/layout\";\r\n\r\nexport default ({\r\n  data: {\r\n    allContentfulArticle: {\r\n      edges: [\r\n        {\r\n          node: {\r\n            title,\r\n            content: {\r\n              childMarkdownRemark: { html }\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}) => {\r\n  return (\r\n    <Layout>\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>{title}</title>\r\n      </Helmet>\r\n      <div dangerouslySetInnerHTML={{ __html: html }} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    allContentfulArticle(filter: { link: { eq: $slug } }) {\r\n      edges {\r\n        node {\r\n          title\r\n          link\r\n          content {\r\n            childMarkdownRemark {\r\n              html\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\nТепер title сайту буде завжди збігатися з назвою статті, що буде істотно впливати на видачу сайту в результатах пошуку, конкретно з цього питання. Сюди ж можна легко додати <meta name=\"description\" content=\"Опис статті\"> з описом кожної статті окремо, надаючи цим можливість користувачеві, ще на сторінці пошуку, зрозуміти, про що йде мова в статті. І взагалі всі можливості SEO тепер доступні, і ними можна керувати з одного місця.\n\nНалаштування PWA\nGatsby розроблений, щоб забезпечити першокласну продуктивність «з коробки». Він бере на себе питання щодо розділення і мінімізації коду, а також оптимізації у вигляді попереднього завантаження у фоновому режимі, обробки зображень і ін. Отже, створюваний вами сайт має високу продуктивність без будь-яких додаткових налаштувань. Ці функції продуктивності є важливою частиною підтримки прогресивного підходу до веб-додатків.\nАле крім усього, перерахованого вище, існують три базові критерії для сайту, які визначають його як PWA:\nhttps-протокол;\nнаявність manifest.json;\nофлайн-доступ до сайту за рахунок service workers.\n\n\nПерший пункт не може бути вирішений силами Gatsby, оскільки домен, хостинг і протокол — це питання деплойменту, і ніяк не розробки. Але можу порадити Netlify, який легко вирішує проблему з https.\nПереходимо до інших пунктів. Для цього встановимо два плагіни:\nyarn add gatsby-plugin-manifest gatsby-plugin-offline\nі налаштуємо їх /src/gatsby-config.js\nif (process.env.NODE_ENV === \"development\") {\r\n  require(\"dotenv\").config();\r\n}\r\n\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-manifest`,\r\n      options: {\r\n        name: `GatsbyJS translated tutorial`,\r\n        short_name: `GatsbyJS tutorial`,\r\n        start_url: `/`,\r\n        background_color: `#f7f0eb`,\r\n        theme_color: `#a2466c`,\r\n        display: `standalone`,\r\n        icon: `public/favicon.ico`,\r\n        include_favicon: true\r\n      }\r\n    },\r\n    `gatsby-plugin-offline`,\r\n    `gatsby-transformer-remark`,\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        name: `images`,\r\n        path: `${__dirname}/src/images/`\r\n      }\r\n    },\r\n    {\r\n      resolve: `gatsby-plugin-typography`,\r\n      options: {\r\n        pathToConfigModule: `src/utils/typography`\r\n      }\r\n    },\r\n    {\r\n      resolve: `gatsby-source-contentful`,\r\n      options: {\r\n        spaceId: process.env.CONTENTFUL_SPACE_ID,\r\n        accessToken: process.env.CONTENTFUL_ACCESS_TOKEN\r\n      }\r\n    },\r\n    `gatsby-plugin-sass`,\r\n    `gatsby-plugin-styled-components`,\r\n    `gatsby-plugin-react-helmet`\r\n  ]\r\n};\nВи можете налаштувати свій маніфест, використовуючи документацію, а також кастомізувати стратегію service-workers, перезаписавши налаштування плагіну.\nНіяких змін в режимі розробки ви не помітите, але сайт вже відповідає останнім вимогам світу web. І коли він буде розміщений на https:// домені, йому не буде рівних.\nВисновок\nКілька років тому, коли я вперше зіткнувся з проблемами виведення в інтернет React-додатку, його підтримки і оновлення контенту, я і не міг уявити, що на ринку вже існував JAM-stack підхід, який спрощує всі ці процеси. І зараз я не перестаю дивуватися його простоті. Gatsby вирішує більшість питань, які впливають на продуктивність сайту просто «з коробки». А якщо ще трохи розібравшись в тонкощах, налаштувати його під свої потреби, то можна отримати 100% показники за всіма пунктами в Lighthouse, чим суттєво вплинути на видачу сайту в пошукових системах (принаймні в Google).\nРепозиторій з проектом\nНаостанок\nЯк ви могли помітити, розглянутий в статті проект копіює основний сайт з документацією Gatsby.js. Це неспроста, тому що я замахнувся перекласти хоча би вступний туторіал російською та українською мовами, щоб популяризувати цей стек в Україні та СНД. Подивитися на поточну версію можна тут.\nЧитайте також мою попередню статтю про те, як створити і опублікувати особистий блог, використовуючи JAM-stack."}},{"node":{"link":"https://dou.ua/lenta/articles/creating-blog-with-jamstack/","title":"JAMstack: створюємо блог з Gatsby + Contentful + Netlify","pubDate":"Fri, 15 Feb 2019 10:00:04 +0200","content":"<p>Ви вже чули про новий підхід JAMstack? Нарешті з’явилася можливість створювати веб-додатки на улюбленому React, мати зручну адмінпанель для керування контентом, а на виході отримувати повністю валідні HTML-сторінки, побудовані згідно з останніми рекомендаціями SEO, PWA та a11y.</p>\n\n<p>Цікаво? Тоді ось список тем, розглянутих у статті:</p>\n\n<ul><li>Що це за новий стек і навіщо він потрібен?</li><li>Як запустити перший проект на Gatsby?</li><li>Contentful для керування даними.</li><li>Як зв’язати Contentful з Gatsby, використовуючи GraphQL?</li><li>Налаштування автоматичного деплойменту з Netlify.</li></ul>\n\n<h2>JAMstack</h2>\n\n<p>Як відомо: «Все нове, то давно забуте старе», і ось ще одне підтвердження ― статичні сайти повертаються. Що таке web десять років тому? Це був PHP сервер-рендер, який при кожному запиті з клієнта підставляв дані з БД у HTML-шаблони і віддавав сторінку.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image3_aruO8x6.png\" style=\"margin: 0 auto; width: 500px;\"></p>\n\n<p>На зміну цьому підходу прийшли JavaScript-фреймворки, які в останні роки представлені святою трійцею вебу <em>React, Angular, Vue</em>, <strike>амінь</strike>. У чому була кардинальна відмінність? У швидкості і чутливості інтерфейсу, адже тепер вся логіка сайту перебудовується на клієнті. І на будь-який рух мишею можна викликати красиву анімацію з одночасною зміною контенту та відправкою запитів на сервер.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/image5_iZisPrr.png\" style=\"margin: 0 auto; width: 500px;\"></p>\n\n<p>Що далі? JAM пропонує:</p>\n\n<ul><li>ніякого server-side рендерингу, та й взагалі прибрати сервер;</li><li>ніякого client-side рендерингу, ніякого більше <code>&lt;div id =\"root\"&gt;&lt;/div&gt;</code>;</li><li>компілювати сайт у звичайний HTML код один раз, лише в момент зміни контенту;</li><li>розміщення сайту на будь-якому файловому хостингу.</li></ul>\n\n<p><img src=\"https://s.dou.ua/storage-files/image6_ZpV6PTV.png\" style=\"margin: 0 auto; width: 500px;\"></p>\n\n<p>Клієнт завжди отримує заздалегідь відрендерену сторінку з повністю валідною з точки зору SEO структурою. І продуктивність тепер залежить лише від швидкості інтернет-з’єднання клієнта (але, звичайно ж, не варто забувати про те, наскільки прямі руки в розробників).</p>\n\n<h2>Інструменти</h2>\n\n<p>JAM — це лише підхід, засобів для якого на ринку вже достатньо. Як відомо, цвяхи можна забивати чим завгодно, але я пропоную використовувати молоток.</p>\n\n<div align=\"center\"><video autoplay loop=\"loop\" muted=\"muted\" onclick=\"this.play()\" src=\"https://s.dou.ua/storage-files/image2_6asGx90.mp4\"></video></div>\n\n<p><br>Список найкращих інструментів на 2019 рік:</p>\n\n<p><a href=\"https://www.gatsbyjs.org/\" target=\"_blank\">Gatsby</a> ― це генератор статичних сайтів з <em>React + GraphQL</em> додатків. Чому саме такий вибір, а не <em>Angular</em> або <em>Vue,</em> я не знаю. Найімовірніше справа у статистиці, яка говорить, що незважаючи на всі суперечки, <em>React</em> — найпопулярніший фреймворк останніх трьох років (не закидайте мене камінням в коментарях за це твердження, насправді мені заплатили). Для більш наочного уявлення: <code>create-react-app</code> компілює код в JavaScript білд для подальшого рендеру під час старту сторінки. Gatsby генерує повноцінні HTML-сторінки, які показуються як є, навіть з вимкненим JS.</p>\n\n<p><a href=\"https://www.contentful.com/\" target=\"_blank\">Contentful</a> ― система управління контентом на статичних сторінках. Це <em>WordPress</em>, який не зберігає зв’язки між шаблонами і даними в БД, а замість цього змінює дані безпосередньо в HTML-файлах.</p>\n\n<p><a href=\"https://app.netlify.com/\" target=\"_blank\">Netlify</a> ― це дуже проста у використанні система деплойменту, яка дозволяє зв’язати більшість популярних файлових хостингів з JAM додатком та ще й на HTTPS-протоколі.</p>\n\n<h2>До справи</h2>\n\n<p>Тепер, коли визначилися з інструментами, можна починати.</p>\n\n<h3>Contentful</h3>\n\n<p>Створюємо аккаунт і бачимо, що автоматично сервіс генерує зразковий проект, який я рекомендую відразу ж видаляти. На мою суб’єктивну думку, він більше заважає, аніж допомагає розібратися. Створюємо новий безкоштовний проект, без генерації зразків.</p>\n\n<p>У цілому система управління базується на двох сутностях — Content model, що описує структуру і типи даних, і сам Content. Для початку створимо просту модель для нашого блогу. Content model складається з типів даних, наприклад, для блогу типами даних будуть: <em>Article, Person</em>.</p>\n\n<p><video autoplay loop=\"loop\" muted=\"muted\" onclick=\"this.play()\" src=\"https://s.dou.ua/storage-files/image7.mp4\"></video></p>\n\n<p>Звичайно ж, можна вибрати рівень абстракції, який здається кращим. Наприклад, можна замість <em>Person</em> вказувати дані про автора всередині <em>Article</em>, як <em>Article.author_name</em></p>\n\n<p><details><summary>Зразок структури даних</summary><pre>  article/\r\n  ├── title (Short text)\r\n  ├── text (Long text)\r\n  ├── banner (Single media)\r\n  └── publishedAt (Date &amp; Time)\r\n\r\n  person/\r\n  ├── fullName (Short text)\r\n  └── avatar (Single media)</pre></details></p>\n\n<p>Далі, використовуючи вже створені типи даних, додаємо контент. Для текстів можна використовувати <a href=\"http://saganipsum.com/\" target=\"_blank\">SaganIpsum</a>, для зображень — <a href=\"https://unsplash.com/search/photos/space\" target=\"_blank\">Unsplash</a>.</p>\n\n<p><img src=\"https://s.dou.ua/storage-files/contentful_content.gif\"></p>\n\n<h3>Gatsby</h3>\n\n<p>Відкриваємо термінал і створюємо робоче середовище:</p>\n\n<pre>## Встановлення\r\nnpm install --global gatsby-cli\r\n\r\n## Створення проекту\r\ngatsby new personal-blog\r\n\r\n## Для любителів мінімалізму можна встановити Hello World проект\r\n## gatsby new minimal-gatsby https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n\r\n## Переходимо в теку\r\ncd personal-blog</pre>\n\n<p>Структура згенерованого проекту</p>\n\n<pre>## Запуск проекту с hot-reloading\r\ngatsby develop</pre>\n\n<p>Що вийшло? <em>React + GraphQL</em> додаток, який збирається за допомогою <em>Gatsby</em>. Це означає, що можна будь-який старий проект, який довго рендериться, перевести в статичний HTML-сайт і отримати приріст у швидкості в кілька разів.</p>\n\n<h3>Gatsby+Contentful</h3>\n\n<pre>## Встановлення додаткових пакетів\r\nnpm install gatsby-source-contentful dotenv</pre>\n\n<p>Створюємо файл <em>.env</em> в кореневій теці додатку з таким змістом:</p>\n\n<pre>/* 12-и значный ключ з Contentful → Settings → API keys → Example key 1→ Space ID */\r\nCONTENTFUL_SPACE_ID=xxxxxxxxxxxx\r\n/* 64-х значный ключ з Contentful → Settings → API keys → Example key 1→ Content Delivery API - access token */\r\nCONTENTFUL_ACCESS_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</pre>\n\n<p>Розширюємо конфігурацію в <em>gatsby-config.js</em>:</p>\n\n<pre>if (process.env.NODE_ENV === \"development\") {\r\n  require(\"dotenv\").config();\r\n}\r\nmodule.exports = {\r\n  /* other settings */\r\n  plugins: [\r\n    /* other plugins */\r\n    {\r\n      resolve: `gatsby-source-contentful`,\r\n      options: {\r\n        spaceId: process.env.CONTENTFUL_SPACE_ID,\r\n        accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\r\n      },\r\n    }\r\n  ]\r\n}\r\n</pre>\n\n<p>Перезапускаємо Gatsby сервер, і, якщо консоль не має ніяких помилок, значить з’єднання з Contentful встановлено і можна переходити далі.</p>\n\n<h3>Gatsby+GraphQL+Contentful</h3>\n\n<p>Якщо ви ще не знайомі з GraphQL, то не переймайтесь, бо це досить просто. Сайт зараз знаходиться за адресою:</p>\n\n<p><a href=\"http://localhost:8000/\" target=\"_blank\">http://localhost:8000</a></p>\n\n<p>Але поки що залишимо його і відкриємо другу вкладку:</p>\n\n<p><a href=\"http://localhost:8000/___graphql\" target=\"_blank\">localhost:8000/___graphql</a></p>\n\n<p>Перед нами IDE для <em>GraphQL</em> прямо в браузері. З ним дуже зручно будувати запити і тестувати їх. Натисніть на Docs у верхньому правому куті, щоб розгорнути сайдбар з документацією. Але сюрприз, це не документація до <em>GraphQL</em>, це документація вашого API. Розгорніть список Query, щоб побачити всі доступні схеми для запитів, з їхніми типами даних.</p>\n\n<p>Схеми, які нас цікавлять, мають приблизно такі назви:</p>\n\n<ul><li>contentful<em>ВашТипДаних</em> — один екземпляр</li><li>allContentful<em>ВашТипДаних</em> — список з екземплярів</li></ul>\n\n<p><details><summary>Зразок моїх даних</summary><ul><li>contentfulArticle</li><li>contentfulPerson</li><li>allContentfulArticle</li><li>allContentfulPerson</li></ul></details></p>\n\n<p>Використовуючи ліву панель, побудуємо правильний запит для наших даних (спробуйте автодоповнення, дуже зручно).</p>\n\n<p><details><summary>Зразок, який запитує один екземпляр типу Person та список з Article</summary><pre>  {\r\n    contentfulPerson {\r\n      fullName\r\n      avatar {\r\n        file {\r\n          url\r\n        }\r\n      }\r\n    } \r\n    allContentfulArticle {\r\n      edges {\r\n        node {\r\n          title\r\n          text {\r\n            text\r\n          }\r\n          banner {\r\n            file {\r\n              url\r\n            }\r\n          }\r\n          publishedAt\r\n        }\r\n      }\r\n    }\r\n  }</pre></details></p>\n\n<p>Що можна відзначити зі структури запитів:</p>\n\n<ul><li>щоб отримати URL для файлу, потрібно звертати на шлях <code>typeName.file.url</code>;</li><li>щоб отримати текст з типу Long text, йдемо по шляху <code>typeName.typeName</code>;</li><li>щоб отримати список екземплярів якогось типу, потрібно використовувати шлях <code>allContentfulName.edges</code>.</li></ul>\n\n<p>Переносимо схему запиту до проекту і рендеримо відповідь як звичайні дані в React-додатку. Загальноприйнятим Best Practice вважається використання <code>&lt;StaticQuery /&gt;</code> компонента, з пакета <a href=\"https://www.npmjs.com/package/gatsby\" target=\"_blank\">gatsby</a>, який вже встановлений в проект.</p>\n\n<p><details><summary>Зразок файлу index.js</summary><pre>  import React from \"react\"\r\n  import { StaticQuery, graphql } from \"gatsby\"\r\n\r\n  import Layout from \"../components/layout\"\r\n  import Article from \"../components/article\"\r\n\r\n  const IndexPage = () =&gt; (\r\n    &lt;Layout&gt;\r\n      &lt;StaticQuery\r\n        query={graphql`\r\n          {\r\n            allContentfulArticle {\r\n              edges {\r\n                node {\r\n                  id\r\n                  title\r\n                  text {\r\n                    text\r\n                  }\r\n                  banner {\r\n                    file {\r\n                      url\r\n                    }\r\n                  }\r\n                  publishedAt\r\n                }\r\n              }\r\n            }\r\n          }\r\n        `}\r\n        render={({\r\n          allContentfulArticle: {\r\n            edges\r\n          }\r\n        }) =&gt; (\r\n          edges.map(({ node }) =&gt; (\r\n            &lt;Article key={node.id} content={node} /&gt;\r\n          ))\r\n        )}\r\n      /&gt;\r\n    &lt;/Layout&gt;\r\n  )\r\n\r\n  export default IndexPage</pre></details></p>\n\n<p>Як це працює? В<code>query</code> передається схема запиту <em>GraphQL</em>, а в <code>render</code> — наш улюблений JSX. Використовуйте деструктуризацію, щоб зробити код більш читабельним.</p>\n\n<p><details><summary>Зразок деструктуризації на прикладі components/article.js</summary><pre>  import React from \"react\"\r\n\r\n  const Article = ({\r\n    content: {\r\n      title,\r\n      text: {\r\n        text\r\n      },\r\n      banner: {\r\n        file: {\r\n          url\r\n        }\r\n      },\r\n      publishedAt\r\n    }\r\n  }) =&gt; (\r\n    &lt;div&gt;\r\n      &lt;h2&gt;{title}&lt;/h2&gt;\r\n      &lt;img src={url} alt={title}/&gt;\r\n      &lt;p&gt;\r\n        {text}\r\n      &lt;/p&gt;\r\n      &lt;h5&gt;{publishedAt}&lt;/h5&gt;\r\n    &lt;/div&gt;\r\n  )\r\n\r\n  export default Article</pre></details></p>\n\n<p>Тепер, коли стало зрозуміло, як отримати і відрендерити дані, можна починати розробку. Але оскільки ця стаття не про те, «як зробити сайт на реакті», то ми пропустимо цей момент і уявимо, що сайт вже готовий.</p>\n\n<p>Розмістимо наш проект на GitHub, звідки його можна буде публікувати в наступному кроці.</p>\n\n<p><details><summary>Для тих, хто досі не в курсі, як це зробити</summary><pre>  ## Находясь в папке с проектом инициализируем пустой репозиторий\r\n  git init\r\n\r\n  ## Сделаем первый коммит\r\n  git add .\r\n  git commit -m “initial commit”\r\n\r\n  ## Создаем репозиторий на GitHub и подключаем\r\n  git remote add origin git@github.com:yourname/my-repository-name.git\r\n\r\n  ## Публикуем изменения\r\n  git push origin master</pre></details></p>\n\n<h3>Налаштовуємо Netlify</h3>\n\n<p>Створюємо аккаунт, використовуючи той сервіс, на якому планується розміщення проектів. Я вибрав GitHub, тому після успішної авторизації налаштуємо новий проект з New site from Git. Підключаємо наш репозиторій, а <em>Netlify</em> автоматично визначить, що це <em>Gatsby</em> проект, і налаштує всі скрипти для збірки.</p>\n\n<p>Вибираємо потрібну гілку і не забуваємо про змінні оточення. Для цього відкриваємо меню Advanced settings і додаємо змінні з локального файлу <em>.env</em> та підтверджуємо налаштування.</p>\n\n<p>Кілька хвилин магії, і сайт на місці: <a href=\"https://tender-liskov-ce3ad0.netlify.com/\" target=\"_blank\">https://tender-liskov-ce3ad0.netlify.com</a></p>\n\n<p>Залишилося додати хук на оновлення контенту. Переходимо в налаштування:</p>\n\n<p>Deploy settings → Build hooks → Add build hook</p>\n\n<p><video autoplay loop=\"loop\" muted=\"muted\" onclick=\"this.play()\" src=\"https://s.dou.ua/storage-files/image8.mp4\"></video></p>\n\n<p>Встановлюємо будь-яку зрозумілу назву, для прикладу <em>«Contentful hook»</em>, вибираємо гілку, з якої будемо робити білд, і підтверджуємо. Результатом буде посилання, копіюємо його і переходимо в панель <em>Contentful</em>:</p>\n\n<p>Settings → Webhooks</p>\n\n<p><video autoplay loop=\"loop\" muted=\"muted\" onclick=\"this.play()\" src=\"https://s.dou.ua/storage-files/image4_aDJU7C1.mp4\"></video></p>\n\n<p>Шукаємо на правій панелі темплейт для <em>Netlify</em> і за кілька кліків пов’язуємо дві системи. Пробуємо змінити контент і дивимося, як нові дані з’являються на сайті.</p>\n\n<h2>Висновок</h2>\n\n<p>JAM-stack поєднує в собі рішення проблем попередніх підходів і, схоже, претендує на захоплення влади і всесвітню популярність. Але чи це революція? Нічого нового і особливого немає, але це найбільш передова методологія останніх двох років там, <a href=\"https://jamstack.org/community/\" target=\"_blank\">на чужині</a>, а у нас? Ми тільки-тільки почали переводити проекти з <em>WordPress</em> на <em>React,</em> і це однозначно прогрес. Але, може, щоб не залишитися за бортом, як легендарний індійський аутсорс, нам час робити більш рішучі кроки?</p>\n\n<p><a href=\"https://github.com/alexandrtovmach/gatsby-contentful-example\" target=\"_blank\">Репозиторій з проектом</a></p>\n\n<p><br></p><h4>Читайте також:</h4>\n\n<p><a href=\"https://dou.ua/lenta/articles/gatsbyjs-guide/\" target=\"_blank\">Детально про Gatsby.js — інструмент для створення складних веб-сайтів</a></p>\n\n<p><a href=\"https://dou.ua/lenta/articles/jamstack/\" target=\"_blank\">Фишки JAMstack: почему статические сайты превосходят традиционные динамические</a></p>","contentSnippet":"Ви вже чули про новий підхід JAMstack? Нарешті з’явилася можливість створювати веб-додатки на улюбленому React, мати зручну адмінпанель для керування контентом, а на виході отримувати повністю валідні HTML-сторінки, побудовані згідно з останніми рекомендаціями SEO, PWA та a11y.\nЦікаво? Тоді ось список тем, розглянутих у статті:\nЩо це за новий стек і навіщо він потрібен?\nЯк запустити перший проект на Gatsby?\nContentful для керування даними.\nЯк зв’язати Contentful з Gatsby, використовуючи GraphQL?\nНалаштування автоматичного деплойменту з Netlify.\n\n\nJAMstack\nЯк відомо: «Все нове, то давно забуте старе», і ось ще одне підтвердження ― статичні сайти повертаються. Що таке web десять років тому? Це був PHP сервер-рендер, який при кожному запиті з клієнта підставляв дані з БД у HTML-шаблони і віддавав сторінку.\n\nНа зміну цьому підходу прийшли JavaScript-фреймворки, які в останні роки представлені святою трійцею вебу React, Angular, Vue, амінь. У чому була кардинальна відмінність? У швидкості і чутливості інтерфейсу, адже тепер вся логіка сайту перебудовується на клієнті. І на будь-який рух мишею можна викликати красиву анімацію з одночасною зміною контенту та відправкою запитів на сервер.\n\nЩо далі? JAM пропонує:\nніякого server-side рендерингу, та й взагалі прибрати сервер;\nніякого client-side рендерингу, ніякого більше <div id =\"root\"></div>;\nкомпілювати сайт у звичайний HTML код один раз, лише в момент зміни контенту;\nрозміщення сайту на будь-якому файловому хостингу.\n\n\n\nКлієнт завжди отримує заздалегідь відрендерену сторінку з повністю валідною з точки зору SEO структурою. І продуктивність тепер залежить лише від швидкості інтернет-з’єднання клієнта (але, звичайно ж, не варто забувати про те, наскільки прямі руки в розробників).\nІнструменти\nJAM — це лише підхід, засобів для якого на ринку вже достатньо. Як відомо, цвяхи можна забивати чим завгодно, але я пропоную використовувати молоток.\n\nСписок найкращих інструментів на 2019 рік:\nGatsby ― це генератор статичних сайтів з React + GraphQL додатків. Чому саме такий вибір, а не Angular або Vue, я не знаю. Найімовірніше справа у статистиці, яка говорить, що незважаючи на всі суперечки, React — найпопулярніший фреймворк останніх трьох років (не закидайте мене камінням в коментарях за це твердження, насправді мені заплатили). Для більш наочного уявлення: create-react-app компілює код в JavaScript білд для подальшого рендеру під час старту сторінки. Gatsby генерує повноцінні HTML-сторінки, які показуються як є, навіть з вимкненим JS.\nContentful ― система управління контентом на статичних сторінках. Це WordPress, який не зберігає зв’язки між шаблонами і даними в БД, а замість цього змінює дані безпосередньо в HTML-файлах.\nNetlify ― це дуже проста у використанні система деплойменту, яка дозволяє зв’язати більшість популярних файлових хостингів з JAM додатком та ще й на HTTPS-протоколі.\nДо справи\nТепер, коли визначилися з інструментами, можна починати.\nContentful\nСтворюємо аккаунт і бачимо, що автоматично сервіс генерує зразковий проект, який я рекомендую відразу ж видаляти. На мою суб’єктивну думку, він більше заважає, аніж допомагає розібратися. Створюємо новий безкоштовний проект, без генерації зразків.\nУ цілому система управління базується на двох сутностях — Content model, що описує структуру і типи даних, і сам Content. Для початку створимо просту модель для нашого блогу. Content model складається з типів даних, наприклад, для блогу типами даних будуть: Article, Person.\n\nЗвичайно ж, можна вибрати рівень абстракції, який здається кращим. Наприклад, можна замість Person вказувати дані про автора всередині Article, як Article.author_name\nЗразок структури даних\n  article/\r\n  ├── title (Short text)\r\n  ├── text (Long text)\r\n  ├── banner (Single media)\r\n  └── publishedAt (Date & Time)\r\n\r\n  person/\r\n  ├── fullName (Short text)\r\n  └── avatar (Single media)\n\nДалі, використовуючи вже створені типи даних, додаємо контент. Для текстів можна використовувати SaganIpsum, для зображень — Unsplash.\n\nGatsby\nВідкриваємо термінал і створюємо робоче середовище:\n## Встановлення\r\nnpm install --global gatsby-cli\r\n\r\n## Створення проекту\r\ngatsby new personal-blog\r\n\r\n## Для любителів мінімалізму можна встановити Hello World проект\r\n## gatsby new minimal-gatsby https://github.com/gatsbyjs/gatsby-starter-hello-world\r\n\r\n## Переходимо в теку\r\ncd personal-blog\nСтруктура згенерованого проекту\n## Запуск проекту с hot-reloading\r\ngatsby develop\nЩо вийшло? React + GraphQL додаток, який збирається за допомогою Gatsby. Це означає, що можна будь-який старий проект, який довго рендериться, перевести в статичний HTML-сайт і отримати приріст у швидкості в кілька разів.\nGatsby+Contentful\n## Встановлення додаткових пакетів\r\nnpm install gatsby-source-contentful dotenv\nСтворюємо файл .env в кореневій теці додатку з таким змістом:\n/* 12-и значный ключ з Contentful → Settings → API keys → Example key 1→ Space ID */\r\nCONTENTFUL_SPACE_ID=xxxxxxxxxxxx\r\n/* 64-х значный ключ з Contentful → Settings → API keys → Example key 1→ Content Delivery API - access token */\r\nCONTENTFUL_ACCESS_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nРозширюємо конфігурацію в gatsby-config.js:\nif (process.env.NODE_ENV === \"development\") {\r\n  require(\"dotenv\").config();\r\n}\r\nmodule.exports = {\r\n  /* other settings */\r\n  plugins: [\r\n    /* other plugins */\r\n    {\r\n      resolve: `gatsby-source-contentful`,\r\n      options: {\r\n        spaceId: process.env.CONTENTFUL_SPACE_ID,\r\n        accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\r\n      },\r\n    }\r\n  ]\r\n}\r\n\n\nПерезапускаємо Gatsby сервер, і, якщо консоль не має ніяких помилок, значить з’єднання з Contentful встановлено і можна переходити далі.\nGatsby+GraphQL+Contentful\nЯкщо ви ще не знайомі з GraphQL, то не переймайтесь, бо це досить просто. Сайт зараз знаходиться за адресою:\nhttp://localhost:8000\nАле поки що залишимо його і відкриємо другу вкладку:\nlocalhost:8000/___graphql\nПеред нами IDE для GraphQL прямо в браузері. З ним дуже зручно будувати запити і тестувати їх. Натисніть на Docs у верхньому правому куті, щоб розгорнути сайдбар з документацією. Але сюрприз, це не документація до GraphQL, це документація вашого API. Розгорніть список Query, щоб побачити всі доступні схеми для запитів, з їхніми типами даних.\nСхеми, які нас цікавлять, мають приблизно такі назви:\ncontentfulВашТипДаних — один екземпляр\nallContentfulВашТипДаних — список з екземплярів\n\n\nЗразок моїх даних\ncontentfulArticle\ncontentfulPerson\nallContentfulArticle\nallContentfulPerson\n\nВикористовуючи ліву панель, побудуємо правильний запит для наших даних (спробуйте автодоповнення, дуже зручно).\nЗразок, який запитує один екземпляр типу Person та список з Article\n  {\r\n    contentfulPerson {\r\n      fullName\r\n      avatar {\r\n        file {\r\n          url\r\n        }\r\n      }\r\n    } \r\n    allContentfulArticle {\r\n      edges {\r\n        node {\r\n          title\r\n          text {\r\n            text\r\n          }\r\n          banner {\r\n            file {\r\n              url\r\n            }\r\n          }\r\n          publishedAt\r\n        }\r\n      }\r\n    }\r\n  }\n\nЩо можна відзначити зі структури запитів:\nщоб отримати URL для файлу, потрібно звертати на шлях typeName.file.url;\nщоб отримати текст з типу Long text, йдемо по шляху typeName.typeName;\nщоб отримати список екземплярів якогось типу, потрібно використовувати шлях allContentfulName.edges.\n\n\nПереносимо схему запиту до проекту і рендеримо відповідь як звичайні дані в React-додатку. Загальноприйнятим Best Practice вважається використання <StaticQuery /> компонента, з пакета gatsby, який вже встановлений в проект.\nЗразок файлу index.js\n  import React from \"react\"\r\n  import { StaticQuery, graphql } from \"gatsby\"\r\n\r\n  import Layout from \"../components/layout\"\r\n  import Article from \"../components/article\"\r\n\r\n  const IndexPage = () => (\r\n    <Layout>\r\n      <StaticQuery\r\n        query={graphql`\r\n          {\r\n            allContentfulArticle {\r\n              edges {\r\n                node {\r\n                  id\r\n                  title\r\n                  text {\r\n                    text\r\n                  }\r\n                  banner {\r\n                    file {\r\n                      url\r\n                    }\r\n                  }\r\n                  publishedAt\r\n                }\r\n              }\r\n            }\r\n          }\r\n        `}\r\n        render={({\r\n          allContentfulArticle: {\r\n            edges\r\n          }\r\n        }) => (\r\n          edges.map(({ node }) => (\r\n            <Article key={node.id} content={node} />\r\n          ))\r\n        )}\r\n      />\r\n    </Layout>\r\n  )\r\n\r\n  export default IndexPage\n\nЯк це працює? Вquery передається схема запиту GraphQL, а в render — наш улюблений JSX. Використовуйте деструктуризацію, щоб зробити код більш читабельним.\nЗразок деструктуризації на прикладі components/article.js\n  import React from \"react\"\r\n\r\n  const Article = ({\r\n    content: {\r\n      title,\r\n      text: {\r\n        text\r\n      },\r\n      banner: {\r\n        file: {\r\n          url\r\n        }\r\n      },\r\n      publishedAt\r\n    }\r\n  }) => (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      <img src={url} alt={title}/>\r\n      <p>\r\n        {text}\r\n      </p>\r\n      <h5>{publishedAt}</h5>\r\n    </div>\r\n  )\r\n\r\n  export default Article\n\nТепер, коли стало зрозуміло, як отримати і відрендерити дані, можна починати розробку. Але оскільки ця стаття не про те, «як зробити сайт на реакті», то ми пропустимо цей момент і уявимо, що сайт вже готовий.\nРозмістимо наш проект на GitHub, звідки його можна буде публікувати в наступному кроці.\nДля тих, хто досі не в курсі, як це зробити\n  ## Находясь в папке с проектом инициализируем пустой репозиторий\r\n  git init\r\n\r\n  ## Сделаем первый коммит\r\n  git add .\r\n  git commit -m “initial commit”\r\n\r\n  ## Создаем репозиторий на GitHub и подключаем\r\n  git remote add origin git@github.com:yourname/my-repository-name.git\r\n\r\n  ## Публикуем изменения\r\n  git push origin master\n\nНалаштовуємо Netlify\nСтворюємо аккаунт, використовуючи той сервіс, на якому планується розміщення проектів. Я вибрав GitHub, тому після успішної авторизації налаштуємо новий проект з New site from Git. Підключаємо наш репозиторій, а Netlify автоматично визначить, що це Gatsby проект, і налаштує всі скрипти для збірки.\nВибираємо потрібну гілку і не забуваємо про змінні оточення. Для цього відкриваємо меню Advanced settings і додаємо змінні з локального файлу .env та підтверджуємо налаштування.\nКілька хвилин магії, і сайт на місці: https://tender-liskov-ce3ad0.netlify.com\nЗалишилося додати хук на оновлення контенту. Переходимо в налаштування:\nDeploy settings → Build hooks → Add build hook\n\nВстановлюємо будь-яку зрозумілу назву, для прикладу «Contentful hook», вибираємо гілку, з якої будемо робити білд, і підтверджуємо. Результатом буде посилання, копіюємо його і переходимо в панель Contentful:\nSettings → Webhooks\n\nШукаємо на правій панелі темплейт для Netlify і за кілька кліків пов’язуємо дві системи. Пробуємо змінити контент і дивимося, як нові дані з’являються на сайті.\nВисновок\nJAM-stack поєднує в собі рішення проблем попередніх підходів і, схоже, претендує на захоплення влади і всесвітню популярність. Але чи це революція? Нічого нового і особливого немає, але це найбільш передова методологія останніх двох років там, на чужині, а у нас? Ми тільки-тільки почали переводити проекти з WordPress на React, і це однозначно прогрес. Але, може, щоб не залишитися за бортом, як легендарний індійський аутсорс, нам час робити більш рішучі кроки?\nРепозиторій з проектом\n\nЧитайте також:\nДетально про Gatsby.js — інструмент для створення складних веб-сайтів\nФишки JAMstack: почему статические сайты превосходят традиционные динамические"}}]},"allFeedMedium":{"edges":[{"node":{"link":"https://medium.com/@alexandrtovmach/microsoft-authorization-with-react-addaead27a5?source=rss-88fc0e3b0587------2","title":"Microsoft authorization with React","pubDate":"Wed, 18 Sep 2019 13:05:21 GMT","categories":["microsoft","authorization","react","alexandrtovmach","npm"],"content":{"encoded":"<p>Step-by-step tutorial about configuring authorization with Microsoft in your React application with NPM package.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*E1eVGQnUIUKduIj9tn3oMg.jpeg\" /></figure><h4>Create a Microsoft app</h4><ol><li>Go to <a href=\"https://portal.azure.com/\">portal.azure.com</a></li><li>Login with an existed Microsoft account or create a new one</li><li>Go to <strong>Azure Active Directory &gt; App registrations &gt; New registration</strong></li><li>Fill input fields with actual data. For example:<br><strong>Name: </strong><em>My test app<br></em><strong>Supported account types: </strong><em>Accounts in any organizational directory<br></em><strong>Redirect URI (optional): </strong><em>[Web] http://localhost:3001</em></li><li>Click <strong>Register</strong></li><li>Then, after a successful creation, you’ll see an application dashboard. Find <strong>Application (client) ID</strong>, we’ll use it in the next steps</li></ol><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.loom.com%2Fembed%2F39a0dbcc117d40b88de6373d8800bab0&amp;url=https%3A%2F%2Fwww.loom.com%2Fshare%2F39a0dbcc117d40b88de6373d8800bab0&amp;image=https%3A%2F%2Fcdn.loom.com%2Fsessions%2Fthumbnails%2F39a0dbcc117d40b88de6373d8800bab0-1568810774864.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=loom\" width=\"1280\" height=\"960\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/dae4c15b2af432826aa1ef0c6704188b/href\">https://medium.com/media/dae4c15b2af432826aa1ef0c6704188b/href</a></iframe><h4>Connect with React app</h4><p>Project initialization is skipped because you should already complete it, and here are two last steps:</p><ol><li>Install dependency:</li></ol><pre>npm i react-microsoft-login</pre><p>2. Import and configure package:</p><pre>import React from &quot;react&quot;;<br>import MicrosoftLogin from &quot;react-microsoft-login&quot;;<br><br>export default props =&gt; {<br><br>    const authHandler = (err, data) =&gt; {<br>        console.log(err, data)<br>    }<br><br>    return (<br>        &lt;MicrosoftLogin<br>            clientId={YOUR_CLIENT_ID}<br>            authCallback={authHandler}<br>        /&gt;<br>    )<br>}</pre><p>Paste your <strong>Application (client) ID</strong> instead of <strong>YOUR_CLIENT_ID</strong>, and your React application able to authorize to Microsoft services now.</p><p>More details about the <em>react-microsoft-login</em> you can find <a href=\"https://github.com/alexandrtovmach/react-microsoft-login\">here</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=addaead27a5\" width=\"1\" height=\"1\" alt=\"\">","encodedSnippet":"Step-by-step tutorial about configuring authorization with Microsoft in your React application with NPM package.\n\nCreate a Microsoft app\n\nGo to portal.azure.com\nLogin with an existed Microsoft account or create a new one\nGo to Azure Active Directory > App registrations > New registration\nFill input fields with actual data. For example:\nName: My test app\nSupported account types: Accounts in any organizational directory\nRedirect URI (optional): [Web] http://localhost:3001\nClick Register\nThen, after a successful creation, you’ll see an application dashboard. Find Application (client) ID, we’ll use it in the next steps\nhttps://medium.com/media/dae4c15b2af432826aa1ef0c6704188b/href\nConnect with React app\nProject initialization is skipped because you should already complete it, and here are two last steps:\n\nInstall dependency:\n\nnpm i react-microsoft-login\n2. Import and configure package:\nimport React from \"react\";\nimport MicrosoftLogin from \"react-microsoft-login\";\nexport default props => {\n    const authHandler = (err, data) => {\n        console.log(err, data)\n    }\n    return (\n        <MicrosoftLogin\n            clientId={YOUR_CLIENT_ID}\n            authCallback={authHandler}\n        />\n    )\n}\nPaste your Application (client) ID instead of YOUR_CLIENT_ID, and your React application able to authorize to Microsoft services now.\nMore details about the react-microsoft-login you can find here"}}},{"node":{"link":"https://medium.com/@alexandrtovmach/the-dark-side-of-google-chrome-e3e000963bfa?source=rss-88fc0e3b0587------2","title":"The Dark Side of Google Chrome","pubDate":"Tue, 17 Sep 2019 11:42:32 GMT","categories":["chrome","google","history-of-technology","alexandrtovmach","browsers"],"content":{"encoded":"<p>Not so long ago I’ve read a really good story about <a href=\"https://usefyi.com/chrome-history/\">how Google Chrome almost completely monopolized the browser market</a>. For me, it looked slightly one-sided and praising. To restore balance and harmony in the universe, I would like to talk about the main problems and unpleasant moments in the history of the formation of the browser from “don’t be evil” corp.</p><figure><img alt=\"chrome-moon-darkside\" src=\"https://cdn-images-1.medium.com/max/1024/1*Kumy9tG567Y4pDD3vD_TwA.jpeg\" /></figure><h4>This article will cover the following list of topics:</h4><ul><li><em>Privacy Issues</em></li><li><em>Advertising strategy</em></li><li><em>Monopoly</em></li><li><em>Benchmark</em></li></ul><p><em>Design and appearance issues are not included in the article, because it is rather difficult to evaluate UI/UX objectively, and for someone, it can be like a novelty and revolution, others will remember that </em><a href=\"https://twitter.com/thisisntanapple/status/721379072950026242\"><em>Leonardo da Vinci</em></a><em> did it before.</em></p><h3>2008</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/832/1*Dm8-slqAda2ORW5iUG7NnQ.jpeg\" /><figcaption>Dec, 2008 (<a href=\"https://www.w3counter.com/globalstats.php?year=2008&amp;month=12\">w3counter.com</a>)</figcaption></figure><p>“Privacy issues” is the most popular topic for Chrome and Google in general for the last years. What kind of data can be collected should be strictly documented in the “Terms of Use”, but not for a huge company whose revenue directly depend on these data.</p><p>Contrary to popular belief that <em>Google began to spy on everyone relatively recently</em>, the first calls appeared almost immediately after the release.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GALtnsG_hgboAEcX6wIcOw.jpeg\" /></figure><h4>License agreement</h4><p>The first version of the agreement granted rights to “perpetual, irrevocable, worldwide, royalty-free and non-exclusive license to reproduce, adapt, modify, translate, publish, publicly perform, publicly display and distribute” any content passing through the Chrome browser.</p><p>We can only guess why it was so brazen. Maybe no one in the company had a plan that the document would be read by someone and share it with everyone. But thanks to very attentive users and bloggers, this detail has been seen and widely covered. Google replied that it was a standard product agreement and <a href=\"https://googleblog.blogspot.com/2008/09/update-to-google-chromes-terms-of.html\">made changes</a>. The new version of the document state user to “retain copyright and any other rights you already hold.”</p><blockquote>“In essence, the user was forced into relinquishing serious privacy and copyright interests in exchange for access to the browser. While an influx of criticism may have prompted Google to amend its language, the mere notion that each query one makes through the browser is saved, tracked and linked to a particular browser should be a cause for concern.”</blockquote><blockquote><a href=\"https://www.technewsworld.com/story/Heads-Up-Chromes-Omnibox-May-Record-What-You-Type-64387.html\">Ryan Jacobson</a>, SmithAmundsen</blockquote><p>Such an unprecedented attempt to push their rules can be explained in two ways:</p><ol><li>No one at Google expected users to read the license agreement, and those who read it will simply not be heard. So the company would have jackpot from the very beginning without any problems, simply thanks to human laziness. <em>How often do you read agreements before installing the software?</em></li><li>It was the simplest manipulation of compromise. By requesting more than it needs, the one side gladly makes concessions, refusing unnecessary requirements and remains with the expected result. So in the case of Google, the expected result was “browser-linked data tracking.”</li></ol><h4>Security issues</h4><ol><li>The day after the release of the beta version of Chrome <a href=\"https://www.evilfingers.com/advisory/Google_Chrome_Browser_0.2.149.27_in_chrome_dll.php\">was discovered vulnerability</a> which allowed hackers to crash the browser. According to Rishi Narang, an independent security researcher, a hacker could create a malicious link that crash Chrome.</li><li>Another problem was about the ability to download and run malicious files. By default, Chrome downloads the file to a folder and displays it in the download bar at the bottom of the browser. If you click on the file, it will be opened. If the file is executable, Windows will ask for confirmation, but not in the case of JAR files (Java archive). They started without any confirmation, and hackers could take advantage of this.<br>Be honest, this bug was not related to specifically Chrome, but related to the Webkit engine and was also present in Safari. But the fact remains.</li><li>When trying to save a page that contains too long <strong>&lt;title&gt;</strong> tag ― browser was frozen and the hacker could control the computer and execute their code on the machine.</li></ol><p>These problems were resolved within a week, and it is also worth saying that it was only a beta version, so such errors are excusable. But then why is it here? To show that Google is no different in its approach to development and also can be wrong. Statements of a “radically new revolutionary approach that solves the problems of predecessors” are nothing more than marketing slogans.</p><blockquote>“They’ll have to track all security vulnerabilities in those features, and fix them in Chrome too. This will probably be only after those vulnerabilities were fixed by the other vendors or were publicly reported. It will put Chrome users at risk for a long time.”</blockquote><blockquote><a href=\"https://www.pcworld.com/article/150639/google_chrome_browser.html\">Aviv Raff</a>, security researcher</blockquote><p>Another speculative topic is the innovativeness of Chrome among browsers. Here are a few arguments:</p><ul><li>At the time of the beta release, Chrome had neither extensions nor applications, and many users refused to switch to it, corny because <strong>Firefox 3.1</strong> had it all. The cherry on the cake is that due to the lack of extensions, users <a href=\"https://lifehacker.com/how-to-block-ads-in-google-chrome-5046529\">couldn’t block annoying ads</a>.</li><li>The Incognito mode <a href=\"https://www.pcworld.com/article/152966/private_browsing.html\">already existed in all flagships</a> of that time, therefore it is also not an invention of Google.</li><li>The start page “like in chrome” was implemented using just <a href=\"https://www.labnol.org/internet/get-opera-like-speed-dial-homepage/5182/\">one extension</a></li></ul><h3>2009</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/837/1*0QI14Xhn1nnCDM1HtyYDWg.jpeg\" /><figcaption>Dec, 2009 (<a href=\"https://www.w3counter.com/globalstats.php?year=2009&amp;month=12\">w3counter.com</a>)</figcaption></figure><h4>Extensibility</h4><p>In December 2009, Google announced the “new” ― Google Chrome Extensions, and these were the first steps in the race in this direction. The permanent leader in it was Firefox, with its add-ons. Here’s <a href=\"https://www.searchenginejournal.com/firefox-addons-google-chrome/15771/\">comparing them</a>:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8Ju4P_4uv_-6lOT2kpKyHw.jpeg\" /></figure><p>It is worth noting that Chrome brought a lot of innovations to the already existing world of extensions, but it is completely unfair to give all the laurels to Google. Much of that has already been done before, and they only improved the existing one, without radically new ideas and revolution in the world of browsers.</p><blockquote>“I don’t see any reason why I should migrate — Chrome extensions are lame comparing to Firefox ones, and yes… they’re more like userscripts.</blockquote><blockquote>If i would migrate after all I would choose SRWare Iron than Google Chrome with their spyware-like s*t“</blockquote><blockquote><a href=\"http://disq.us/p/ez11v\">redapple</a>, sofa critic</blockquote><p>Over time, good developers who don’t want to get down from their favorite browser added the ability to <a href=\"https://ubuntuforums.org/showthread.php?t=1337032\">port extensions from Chrome to Firefox</a>.</p><h4>Synchronization</h4><p>In the same year, Chrome rolled out functionality to browser sync on all user devices. Again, nothing new — Mozilla has already been given various plug-ins and add-ons to solve this problem, but they were paid or partially paid:</p><ul><li><a href=\"https://en.wikipedia.org/wiki/Xmarks_Sync\">Xmarks</a> ― it took quite a while for the most popular of free bookmark synchronization solutions to announce problems and <a href=\"http://www.pledgebank.com/XmarksPremium\">ask for help</a> from its users. Spoiler — this was not successful.</li><li><a href=\"https://lastpass.com\">Lastpass</a> ― an independent service for password synchronization existed “before” Chrome and still exists.</li></ul><p>Google won simply by combining all “in the box” of their browser and provided it free. Can this be considered dishonest? I don’t think, because Firefox one year later <a href=\"https://lifehacker.com/firefox-sync-to-incorporate-bookmark-password-prefere-5552688\">started implementing such functionality</a> directly to the browser. Fact is that Chrome is just a well-planned product in terms of marketing and strategy, and not from the technology and innovation side.</p><h3>2010</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/835/1*diPsoMBiXRwMRQxj-f8trA.jpeg\" /><figcaption>Dec, 2010 (<a href=\"https://www.w3counter.com/globalstats.php?year=2010&amp;month=12\">w3counter.com</a>)</figcaption></figure><h4>Promotion</h4><p>As a giant company, which owns one of the most popular search engines, and also manages the largest admin resource for advertising on the Internet, Google can afford promotion everywhere on the Internet. Chrome ads were displayed on almost any resource on the Internet that allocated space for banners.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/991/1*7tFPr0PEjlsRP6Atxa6cGg.jpeg\" /></figure><p>A bit later, advertising began to appear in software installation. It is difficult to unequivocally state that these were purchased advertisements, and not just easter eggs from developers, but there is still a fact that influenced the market:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/550/1*dCpYVPHUvQtd6wEJ-XuGgw.png\" /><figcaption><a href=\"https://www.wikihow.com/Install-Adobe-Flash-Player\">wikihow.com</a></figcaption></figure><blockquote>“Almost everyone with low computer education got it with a Adobe Flash update. In the installers they were taught to uncheck the boxes, but no one expected to remove it beforehand on the site.”</blockquote><blockquote><a href=\"https://habr.com/ru/post/463983/#comment_20528847\">rubero</a>, habrauser</blockquote><h3>2011 — now</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/838/1*LgjAx8b58w1COs3HoPOy8w.jpeg\" /><figcaption>Dec, 2011 (<a href=\"https://www.w3counter.com/globalstats.php?year=2011&amp;month=12\">w3counter.com</a>)</figcaption></figure><p>In October 2011, Chrome <a href=\"https://gs.statcounter.com/browser-market-share#monthly-201101-201112\">ahead of the number of active users</a> of its first serious competitor — Firefox. On the road to a complete seizure of power, only IE remains, with its 37% market share.</p><p>To capture an even larger audience, in Google decided to resort to an eccentric step by today’s standards — they used offline advertising as banners.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WbZEzJ7kOFyVOsVtuq7vFw.jpeg\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*xdaSlvWS062dRX1YGZ7WEg.jpeg\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/620/1*gslaTrhomeUPiGyhVkNQRA.jpeg\" /></figure><p>In 2019, it seems strange to use offline advertising methods, because everywhere you can hear “the future on the Internet”, “digitizing a business,” but at that moment it helps and on May 13, 2012 ― <a href=\"https://gs.statcounter.com/browser-market-share#monthly-201201-201212\">Chrome outperformed</a> its last and most powerful adversary. (Internet Explorer) in terms of the user count.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/835/1*zuzEL_k473b1yrr9f8X3kQ.jpeg\" /><figcaption>Dec, 2012 (<a href=\"https://www.w3counter.com/globalstats.php?year=2012&amp;month=12\">w3counter.com</a>)</figcaption></figure><h4>Monopoly</h4><p>After winning first place, Google began to promote their ideas and no one could resist them. So we got our “today”, where the standards are determined by almost one company.</p><p>With power, Chrome can influence the web with the simplest changes to the UI, such as the transition from HTTP to HTTPS:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*HvbFo8LnAVLt3yT6SImR8w.png\" /><figcaption><a href=\"https://blog.chromium.org/2018/05/evolving-chromes-security-indicators.html\">blog.chromium.org</a></figcaption></figure><p>The business needs to look better than others, or at least not worse, and Not Secure mark near website address not very useful for that. Of course, developers were given tasks to create certificates for the sites and receive the coveted HTTPS.</p><p>In this case, the concentration of power in one hand led to good results — safe Internet, but this doesn’t mean that it will always be the same. The competition gives rise to ideas, and its absence, respectively, leads to stomping on the spot. HTTPS is Google’s long-standing promise, an old idea from Web 2.0 spec, so here’s not any reasons to believe in progress.</p><p>Monopolization of power leads to the destruction of competitors — for example, it was noticed that Google, making changes to the YouTube app code, <a href=\"https://fortune.com/2018/07/25/youtube-slow-mozilla-firefox-chrome/\">slowed down service in all other browsers except Chrome</a>. Another example, when Microsoft stopped supporting the <a href=\"https://web.skype.com\">web version of Skype</a> for all browsers except Chrome, due to the presence of experimental modules that are not standard.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*Z6ny43FBUIWBocJwhIiTMA.png\" /><figcaption><a href=\"https://web.skype.com/\">web.skype.com</a></figcaption></figure><blockquote>“Microsoft has said that they have stopped supporting other browsers based on “customer value” apart from technical issues. They are of an opinion that customer value is enhanced by supporting popularly used browsers only.”</blockquote><blockquote><a href=\"https://reclaimthenet.org/a-chrome-browser-monopoly/\">Naga Pramod</a></blockquote><p>Chrome developers, like any other browser teams, implementing experimental functionality in the browser. These developments are not initially a standard but claim to become one. Due to the huge audience of Chrome, everyone is starting to use these test-features to meet the needs of the business and cover more users, which leads to the popularity of these innovations among developers and their adoption as a standard. According to this scheme, other browsers are forced not to compete and offer their ideas for the web and should chase after Google.</p><h4>Benchmark</h4><p>In many sources, we can find that chrome is “faster better stronger” than its competitors and that this is the main reason for success. Here is a list of the most comprehensive and objective benchmark tests:</p><ul><li><a href=\"https://lifehacker.com/browser-speed-tests-the-compiled-up-to-date-results-5055406\">2008</a></li><li><a href=\"https://lifehacker.com/browser-speed-tests-chrome-4-0-and-opera-10-take-on-al-5352195\">2009</a></li><li><a href=\"http://www.speed-battle.com/statistics_e.php\">2010–2019</a></li></ul><p>You can’t say that Chrome is the worst of browsers, but it is not the best, at least the struggle is on. Someways Safari is better than Chrome, Chrome is ahead of FF on the other side, and according to some criteria, it may turn out that Edge is greater than all of them.</p><h3>Summary</h3><p>Chrome is a regular browser with an unusual success story, where there is no place for one decisive factor that would determine everything. This is the result of random events and circumstances, skillful management and money — any product lives by this formula.</p><p>P.S. If you use Chrome, then you should read about <a href=\"https://www.quora.com/How-safe-is-Google-chrome-in-terms-of-privacy/answer/Bob-Anderson-94\">interesting points in the agreement</a></p><p>P.S.S. <a href=\"https://medium.com/digitalprivacywise/why-you-should-stop-using-google-chrome-6c934c9a827c\">How to quit Chrome?</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e3e000963bfa\" width=\"1\" height=\"1\" alt=\"\">","encodedSnippet":"Not so long ago I’ve read a really good story about how Google Chrome almost completely monopolized the browser market. For me, it looked slightly one-sided and praising. To restore balance and harmony in the universe, I would like to talk about the main problems and unpleasant moments in the history of the formation of the browser from “don’t be evil” corp.\n\nThis article will cover the following list of topics:\n\nPrivacy Issues\nAdvertising strategy\nMonopoly\nBenchmark\n\nDesign and appearance issues are not included in the article, because it is rather difficult to evaluate UI/UX objectively, and for someone, it can be like a novelty and revolution, others will remember that Leonardo da Vinci did it before.\n2008\nDec, 2008 (w3counter.com)\n“Privacy issues” is the most popular topic for Chrome and Google in general for the last years. What kind of data can be collected should be strictly documented in the “Terms of Use”, but not for a huge company whose revenue directly depend on these data.\nContrary to popular belief that Google began to spy on everyone relatively recently, the first calls appeared almost immediately after the release.\n\nLicense agreement\nThe first version of the agreement granted rights to “perpetual, irrevocable, worldwide, royalty-free and non-exclusive license to reproduce, adapt, modify, translate, publish, publicly perform, publicly display and distribute” any content passing through the Chrome browser.\nWe can only guess why it was so brazen. Maybe no one in the company had a plan that the document would be read by someone and share it with everyone. But thanks to very attentive users and bloggers, this detail has been seen and widely covered. Google replied that it was a standard product agreement and made changes. The new version of the document state user to “retain copyright and any other rights you already hold.”\n“In essence, the user was forced into relinquishing serious privacy and copyright interests in exchange for access to the browser. While an influx of criticism may have prompted Google to amend its language, the mere notion that each query one makes through the browser is saved, tracked and linked to a particular browser should be a cause for concern.”\nRyan Jacobson, SmithAmundsen\nSuch an unprecedented attempt to push their rules can be explained in two ways:\n\nNo one at Google expected users to read the license agreement, and those who read it will simply not be heard. So the company would have jackpot from the very beginning without any problems, simply thanks to human laziness. How often do you read agreements before installing the software?\nIt was the simplest manipulation of compromise. By requesting more than it needs, the one side gladly makes concessions, refusing unnecessary requirements and remains with the expected result. So in the case of Google, the expected result was “browser-linked data tracking.”\n\nSecurity issues\n\nThe day after the release of the beta version of Chrome was discovered vulnerability which allowed hackers to crash the browser. According to Rishi Narang, an independent security researcher, a hacker could create a malicious link that crash Chrome.\nAnother problem was about the ability to download and run malicious files. By default, Chrome downloads the file to a folder and displays it in the download bar at the bottom of the browser. If you click on the file, it will be opened. If the file is executable, Windows will ask for confirmation, but not in the case of JAR files (Java archive). They started without any confirmation, and hackers could take advantage of this.\nBe honest, this bug was not related to specifically Chrome, but related to the Webkit engine and was also present in Safari. But the fact remains.\nWhen trying to save a page that contains too long <title> tag ― browser was frozen and the hacker could control the computer and execute their code on the machine.\n\nThese problems were resolved within a week, and it is also worth saying that it was only a beta version, so such errors are excusable. But then why is it here? To show that Google is no different in its approach to development and also can be wrong. Statements of a “radically new revolutionary approach that solves the problems of predecessors” are nothing more than marketing slogans.\n“They’ll have to track all security vulnerabilities in those features, and fix them in Chrome too. This will probably be only after those vulnerabilities were fixed by the other vendors or were publicly reported. It will put Chrome users at risk for a long time.”\nAviv Raff, security researcher\nAnother speculative topic is the innovativeness of Chrome among browsers. Here are a few arguments:\n\nAt the time of the beta release, Chrome had neither extensions nor applications, and many users refused to switch to it, corny because Firefox 3.1 had it all. The cherry on the cake is that due to the lack of extensions, users couldn’t block annoying ads.\nThe Incognito mode already existed in all flagships of that time, therefore it is also not an invention of Google.\nThe start page “like in chrome” was implemented using just one extension\n\n2009\nDec, 2009 (w3counter.com)\nExtensibility\nIn December 2009, Google announced the “new” ― Google Chrome Extensions, and these were the first steps in the race in this direction. The permanent leader in it was Firefox, with its add-ons. Here’s comparing them:\n\nIt is worth noting that Chrome brought a lot of innovations to the already existing world of extensions, but it is completely unfair to give all the laurels to Google. Much of that has already been done before, and they only improved the existing one, without radically new ideas and revolution in the world of browsers.\n“I don’t see any reason why I should migrate — Chrome extensions are lame comparing to Firefox ones, and yes… they’re more like userscripts.\nIf i would migrate after all I would choose SRWare Iron than Google Chrome with their spyware-like s*t“\nredapple, sofa critic\nOver time, good developers who don’t want to get down from their favorite browser added the ability to port extensions from Chrome to Firefox.\nSynchronization\nIn the same year, Chrome rolled out functionality to browser sync on all user devices. Again, nothing new — Mozilla has already been given various plug-ins and add-ons to solve this problem, but they were paid or partially paid:\n\nXmarks ― it took quite a while for the most popular of free bookmark synchronization solutions to announce problems and ask for help from its users. Spoiler — this was not successful.\nLastpass ― an independent service for password synchronization existed “before” Chrome and still exists.\n\nGoogle won simply by combining all “in the box” of their browser and provided it free. Can this be considered dishonest? I don’t think, because Firefox one year later started implementing such functionality directly to the browser. Fact is that Chrome is just a well-planned product in terms of marketing and strategy, and not from the technology and innovation side.\n2010\nDec, 2010 (w3counter.com)\nPromotion\nAs a giant company, which owns one of the most popular search engines, and also manages the largest admin resource for advertising on the Internet, Google can afford promotion everywhere on the Internet. Chrome ads were displayed on almost any resource on the Internet that allocated space for banners.\n\nA bit later, advertising began to appear in software installation. It is difficult to unequivocally state that these were purchased advertisements, and not just easter eggs from developers, but there is still a fact that influenced the market:\nwikihow.com\n“Almost everyone with low computer education got it with a Adobe Flash update. In the installers they were taught to uncheck the boxes, but no one expected to remove it beforehand on the site.”\nrubero, habrauser\n2011 — now\nDec, 2011 (w3counter.com)\nIn October 2011, Chrome ahead of the number of active users of its first serious competitor — Firefox. On the road to a complete seizure of power, only IE remains, with its 37% market share.\nTo capture an even larger audience, in Google decided to resort to an eccentric step by today’s standards — they used offline advertising as banners.\n\nIn 2019, it seems strange to use offline advertising methods, because everywhere you can hear “the future on the Internet”, “digitizing a business,” but at that moment it helps and on May 13, 2012 ― Chrome outperformed its last and most powerful adversary. (Internet Explorer) in terms of the user count.\nDec, 2012 (w3counter.com)\nMonopoly\nAfter winning first place, Google began to promote their ideas and no one could resist them. So we got our “today”, where the standards are determined by almost one company.\nWith power, Chrome can influence the web with the simplest changes to the UI, such as the transition from HTTP to HTTPS:\nblog.chromium.org\nThe business needs to look better than others, or at least not worse, and Not Secure mark near website address not very useful for that. Of course, developers were given tasks to create certificates for the sites and receive the coveted HTTPS.\nIn this case, the concentration of power in one hand led to good results — safe Internet, but this doesn’t mean that it will always be the same. The competition gives rise to ideas, and its absence, respectively, leads to stomping on the spot. HTTPS is Google’s long-standing promise, an old idea from Web 2.0 spec, so here’s not any reasons to believe in progress.\nMonopolization of power leads to the destruction of competitors — for example, it was noticed that Google, making changes to the YouTube app code, slowed down service in all other browsers except Chrome. Another example, when Microsoft stopped supporting the web version of Skype for all browsers except Chrome, due to the presence of experimental modules that are not standard.\nweb.skype.com\n“Microsoft has said that they have stopped supporting other browsers based on “customer value” apart from technical issues. They are of an opinion that customer value is enhanced by supporting popularly used browsers only.”\nNaga Pramod\nChrome developers, like any other browser teams, implementing experimental functionality in the browser. These developments are not initially a standard but claim to become one. Due to the huge audience of Chrome, everyone is starting to use these test-features to meet the needs of the business and cover more users, which leads to the popularity of these innovations among developers and their adoption as a standard. According to this scheme, other browsers are forced not to compete and offer their ideas for the web and should chase after Google.\nBenchmark\nIn many sources, we can find that chrome is “faster better stronger” than its competitors and that this is the main reason for success. Here is a list of the most comprehensive and objective benchmark tests:\n\n2008\n2009\n2010–2019\n\nYou can’t say that Chrome is the worst of browsers, but it is not the best, at least the struggle is on. Someways Safari is better than Chrome, Chrome is ahead of FF on the other side, and according to some criteria, it may turn out that Edge is greater than all of them.\nSummary\nChrome is a regular browser with an unusual success story, where there is no place for one decisive factor that would determine everything. This is the result of random events and circumstances, skillful management and money — any product lives by this formula.\nP.S. If you use Chrome, then you should read about interesting points in the agreement\nP.S.S. How to quit Chrome?"}}}]}},"pageContext":{}},"staticQueryHashes":["63159454"]}